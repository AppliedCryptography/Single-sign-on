(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.FusionAuth = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
/*
 * Copyright (c) 2019, FusionAuth, All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var FusionAuthClient_1 = require("./src/FusionAuthClient");
exports.default = FusionAuthClient_1.default;
__export(require("./src/FusionAuthClient"));
__export(require("./src/DefaultRESTClientBuilder"));
__export(require("./src/ClientResponse"));

},{"./src/ClientResponse":3,"./src/DefaultRESTClientBuilder":5,"./src/FusionAuthClient":6}],2:[function(require,module,exports){
(function (global){
"use strict";

// ref: https://github.com/tc39/proposal-global
var getGlobal = function () {
	// the only reliable means to get the global object is
	// `Function('return this')()`
	// However, this causes CSP violations in Chrome apps.
	if (typeof self !== 'undefined') { return self; }
	if (typeof window !== 'undefined') { return window; }
	if (typeof global !== 'undefined') { return global; }
	throw new Error('unable to locate global object');
}

var global = getGlobal();

module.exports = exports = global.fetch;

// Needed for TypeScript and Webpack.
if (global.fetch) {
	exports.default = global.fetch.bind(global);
}

exports.Headers = global.Headers;
exports.Request = global.Request;
exports.Response = global.Response;
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],3:[function(require,module,exports){
"use strict";
/*
 * Copyright (c) 2019, FusionAuth, All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var ClientResponse = /** @class */ (function () {
    function ClientResponse() {
    }
    ClientResponse.prototype.wasSuccessful = function () {
        return this.statusCode >= 200 && this.statusCode < 300;
    };
    return ClientResponse;
}());
exports.default = ClientResponse;

},{}],4:[function(require,module,exports){
(function (global){
"use strict";
/*
 * Copyright (c) 2019-2020, FusionAuth, All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var ClientResponse_1 = require("./ClientResponse");
var node_fetch_1 = require("node-fetch");
var url_1 = (typeof window !== "undefined" ? window['window'] : typeof global !== "undefined" ? global['window'] : null);
/**
 * @author Brett P
 * @author Tyler Scott
 * @author TJ Peden
 */
var DefaultRESTClient = /** @class */ (function () {
    function DefaultRESTClient(host) {
        this.host = host;
        this.headers = {};
        this.parameters = {};
        this.responseHandler = DefaultRESTClient.JSONResponseHandler;
        this.errorResponseHandler = DefaultRESTClient.ErrorJSONResponseHandler;
    }
    /**
     * Sets the authorization header using a key
     *
     * @param {string} key The value of the authorization header.
     * @returns {DefaultRESTClient}
     */
    DefaultRESTClient.prototype.withAuthorization = function (key) {
        if (key === null || typeof key === 'undefined') {
            return this;
        }
        this.withHeader('Authorization', key);
        return this;
    };
    /**
     * Adds a segment to the request uri
     */
    DefaultRESTClient.prototype.withUriSegment = function (segment) {
        if (segment === null || segment === undefined) {
            return this;
        }
        if (this.uri === null) {
            this.uri = '';
        }
        if (this.uri.charAt(this.uri.length - 1) !== '/') {
            this.uri += '/';
        }
        this.uri = this.uri + segment;
        return this;
    };
    /**
     * Get the full url + parameter list
     */
    DefaultRESTClient.prototype.getFullUrl = function () {
        return this.host + this.uri + this.getQueryString();
    };
    /**
     * Sets the body of the client request.
     *
     * @param body The object to be written to the request body as form data.
     */
    DefaultRESTClient.prototype.withFormData = function (body) {
        var body2 = new url_1.URLSearchParams();
        if (body) {
            body.forEach(function (value, name, searchParams) {
                if (value && value.length > 0 && value != "null" && value != "undefined") {
                    body2.set(name, value);
                }
            });
            body = body2;
        }
        this.body = body;
        this.withHeader('Content-Type', 'application/x-www-form-urlencoded');
        return this;
    };
    /**
     * Adds a header to the request.
     *
     * @param key The name of the header.
     * @param value The value of the header.
     */
    DefaultRESTClient.prototype.withHeader = function (key, value) {
        this.headers[key] = value;
        return this;
    };
    /**
     * Sets the body of the client request.
     *
     * @param body The object to be written to the request body as JSON.
     */
    DefaultRESTClient.prototype.withJSONBody = function (body) {
        this.body = JSON.stringify(body);
        this.withHeader('Content-Type', 'application/json');
        // Omit the Content-Length, this is set auto-magically by the request library
        return this;
    };
    /**
     * Sets the http method for the request
     */
    DefaultRESTClient.prototype.withMethod = function (method) {
        this.method = method;
        return this;
    };
    /**
     * Sets the uri of the request
     */
    DefaultRESTClient.prototype.withUri = function (uri) {
        this.uri = uri;
        return this;
    };
    /**
     * Adds parameters to the request.
     *
     * @param name The name of the parameter.
     * @param value The value of the parameter, may be a string, object or number.
     */
    DefaultRESTClient.prototype.withParameter = function (name, value) {
        this.parameters[name] = value;
        return this;
    };
    /**
     * Sets request's credentials.
     *
     * @param value A string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL.
     */
    DefaultRESTClient.prototype.withCredentials = function (value) {
        this.credentials = value;
        return this;
    };
    DefaultRESTClient.prototype.withResponseHandler = function (handler) {
        this.responseHandler = handler;
        return this;
    };
    DefaultRESTClient.prototype.withErrorResponseHandler = function (handler) {
        this.errorResponseHandler = handler;
        return this;
    };
    /**
     * Run the request and return a promise. This promise will resolve if the request is successful
     * and reject otherwise.
     */
    DefaultRESTClient.prototype.go = function () {
        return __awaiter(this, void 0, void 0, function () {
            var clientResponse, response, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        clientResponse = new ClientResponse_1.default();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 7, , 8]);
                        return [4 /*yield*/, node_fetch_1.default(this.getFullUrl(), {
                                method: this.method,
                                headers: this.headers,
                                body: this.body,
                                // @ts-ignore (Credentials are not supported on NodeJS)
                                credentials: this.credentials,
                            })];
                    case 2:
                        response = _a.sent();
                        if (!response.ok) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.responseHandler(response)];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4: return [4 /*yield*/, this.errorResponseHandler(response)];
                    case 5: throw _a.sent();
                    case 6: return [3 /*break*/, 8];
                    case 7:
                        error_1 = _a.sent();
                        if (error_1 instanceof ClientResponse_1.default) {
                            throw error_1; // Don't catch a ClientResponse (we want this to trigger the catch of the promise
                        }
                        if (response) { // Try to recover the response status
                            clientResponse.statusCode = response.status;
                        }
                        clientResponse.exception = error_1;
                        throw clientResponse;
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    DefaultRESTClient.prototype.getQueryString = function () {
        var queryString = '';
        for (var key in this.parameters) {
            queryString += (queryString.length === 0) ? '?' : '&';
            queryString += key + '=' + encodeURIComponent(this.parameters[key]);
        }
        return queryString;
    };
    /**
     * A function that returns the JSON form of the response text.
     *
     * @param response
     * @constructor
     */
    DefaultRESTClient.JSONResponseHandler = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var clientResponse, type, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        clientResponse = new ClientResponse_1.default();
                        clientResponse.statusCode = response.status;
                        type = response.headers.get("content-type");
                        if (!(type && type.startsWith("application/json"))) return [3 /*break*/, 2];
                        _a = clientResponse;
                        return [4 /*yield*/, response.json()];
                    case 1:
                        _a.response = _b.sent();
                        _b.label = 2;
                    case 2: return [2 /*return*/, clientResponse];
                }
            });
        });
    };
    /**
     * A function that returns the JSON form of the response text.
     *
     * @param response
     * @constructor
     */
    DefaultRESTClient.ErrorJSONResponseHandler = function (response) {
        return __awaiter(this, void 0, void 0, function () {
            var clientResponse, type, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        clientResponse = new ClientResponse_1.default();
                        clientResponse.statusCode = response.status;
                        type = response.headers.get("content-type");
                        if (!(type && type.startsWith("application/json"))) return [3 /*break*/, 2];
                        _a = clientResponse;
                        return [4 /*yield*/, response.json()];
                    case 1:
                        _a.exception = _b.sent();
                        _b.label = 2;
                    case 2: return [2 /*return*/, clientResponse];
                }
            });
        });
    };
    return DefaultRESTClient;
}());
exports.default = DefaultRESTClient;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./ClientResponse":3,"node-fetch":2}],5:[function(require,module,exports){
"use strict";
/*
 * Copyright (c) 2019, FusionAuth, All Rights Reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var DefaultRESTClient_1 = require("./DefaultRESTClient");
var DefaultRESTClientBuilder = /** @class */ (function () {
    function DefaultRESTClientBuilder() {
    }
    DefaultRESTClientBuilder.prototype.build = function (host) {
        return new DefaultRESTClient_1.default(host);
    };
    return DefaultRESTClientBuilder;
}());
exports.default = DefaultRESTClientBuilder;

},{"./DefaultRESTClient":4}],6:[function(require,module,exports){
(function (global){
"use strict";
/*
* Copyright (c) 2019, FusionAuth, All Rights Reserved
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
* either express or implied. See the License for the specific
* language governing permissions and limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
var DefaultRESTClientBuilder_1 = require("./DefaultRESTClientBuilder");
var url_1 = (typeof window !== "undefined" ? window['window'] : typeof global !== "undefined" ? global['window'] : null);
var FusionAuthClient = /** @class */ (function () {
    function FusionAuthClient(apiKey, host, tenantId) {
        this.apiKey = apiKey;
        this.host = host;
        this.tenantId = tenantId;
        this.clientBuilder = new DefaultRESTClientBuilder_1.default();
    }
    /**
     * Sets the tenant id, that will be included in the X-FusionAuth-TenantId header.
     *
     * @param {string | null} tenantId The value of the X-FusionAuth-TenantId header.
     * @returns {FusionAuthClient}
     */
    FusionAuthClient.prototype.setTenantId = function (tenantId) {
        this.tenantId = tenantId;
        return this;
    };
    /**
     * Sets whether and how cookies will be sent with each request.
     *
     * @param value The value that indicates whether and how cookies will be sent.
     * @returns {FusionAuthClient}
     */
    FusionAuthClient.prototype.setRequestCredentials = function (value) {
        this.credentials = value;
        return this;
    };
    /**
     * Takes an action on a user. The user being actioned is called the "actionee" and the user taking the action is called the
     * "actioner". Both user ids are required in the request object.
     *
     * @param {ActionRequest} request The action request that includes all of the information about the action being taken including
     *    the id of the action, any options and the duration (if applicable).
     * @returns {Promise<ClientResponse<ActionResponse>>}
     */
    FusionAuthClient.prototype.actionUser = function (request) {
        return this.start()
            .withUri('/api/user/action')
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Adds a user to an existing family. The family id must be specified.
     *
     * @param {UUID} familyId The id of the family.
     * @param {FamilyRequest} request The request object that contains all of the information used to determine which user to add to the family.
     * @returns {Promise<ClientResponse<FamilyResponse>>}
     */
    FusionAuthClient.prototype.addUserToFamily = function (familyId, request) {
        return this.start()
            .withUri('/api/user/family')
            .withUriSegment(familyId)
            .withJSONBody(request)
            .withMethod("PUT")
            .go();
    };
    /**
     * Cancels the user action.
     *
     * @param {UUID} actionId The action id of the action to cancel.
     * @param {ActionRequest} request The action request that contains the information about the cancellation.
     * @returns {Promise<ClientResponse<ActionResponse>>}
     */
    FusionAuthClient.prototype.cancelAction = function (actionId, request) {
        return this.start()
            .withUri('/api/user/action')
            .withUriSegment(actionId)
            .withJSONBody(request)
            .withMethod("DELETE")
            .go();
    };
    /**
     * Changes a user's password using the change password Id. This usually occurs after an email has been sent to the user
     * and they clicked on a link to reset their password.
     *
     * @param {string} changePasswordId The change password Id used to find the user. This value is generated by FusionAuth once the change password workflow has been initiated.
     * @param {ChangePasswordRequest} request The change password request that contains all of the information used to change the password.
     * @returns {Promise<ClientResponse<ChangePasswordResponse>>}
     */
    FusionAuthClient.prototype.changePassword = function (changePasswordId, request) {
        return this.start()
            .withUri('/api/user/change-password')
            .withUriSegment(changePasswordId)
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Changes a user's password using their identity (login id and password). Using a loginId instead of the changePasswordId
     * bypasses the email verification and allows a password to be changed directly without first calling the #forgotPassword
     * method.
     *
     * @param {ChangePasswordRequest} request The change password request that contains all of the information used to change the password.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.changePasswordByIdentity = function (request) {
        return this.start()
            .withUri('/api/user/change-password')
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Adds a comment to the user's account.
     *
     * @param {UserCommentRequest} request The request object that contains all of the information used to create the user comment.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.commentOnUser = function (request) {
        return this.start()
            .withUri('/api/user/comment')
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Creates an application. You can optionally specify an Id for the application, if not provided one will be generated.
     *
     * @param {UUID} applicationId (Optional) The Id to use for the application. If not provided a secure random UUID will be generated.
     * @param {ApplicationRequest} request The request object that contains all of the information used to create the application.
     * @returns {Promise<ClientResponse<ApplicationResponse>>}
     */
    FusionAuthClient.prototype.createApplication = function (applicationId, request) {
        return this.start()
            .withUri('/api/application')
            .withUriSegment(applicationId)
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Creates a new role for an application. You must specify the id of the application you are creating the role for.
     * You can optionally specify an Id for the role inside the ApplicationRole object itself, if not provided one will be generated.
     *
     * @param {UUID} applicationId The Id of the application to create the role on.
     * @param {UUID} roleId (Optional) The Id of the role. If not provided a secure random UUID will be generated.
     * @param {ApplicationRequest} request The request object that contains all of the information used to create the application role.
     * @returns {Promise<ClientResponse<ApplicationResponse>>}
     */
    FusionAuthClient.prototype.createApplicationRole = function (applicationId, roleId, request) {
        return this.start()
            .withUri('/api/application')
            .withUriSegment(applicationId)
            .withUriSegment("role")
            .withUriSegment(roleId)
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Creates an audit log with the message and user name (usually an email). Audit logs should be written anytime you
     * make changes to the FusionAuth database. When using the FusionAuth App web interface, any changes are automatically
     * written to the audit log. However, if you are accessing the API, you must write the audit logs yourself.
     *
     * @param {AuditLogRequest} request The request object that contains all of the information used to create the audit log entry.
     * @returns {Promise<ClientResponse<AuditLogResponse>>}
     */
    FusionAuthClient.prototype.createAuditLog = function (request) {
        return this.start()
            .withUri('/api/system/audit-log')
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Creates a connector.  You can optionally specify an Id for the connector, if not provided one will be generated.
     *
     * @param {UUID} connectorId (Optional) The Id for the connector. If not provided a secure random UUID will be generated.
     * @param {ConnectorRequest} request The request object that contains all of the information used to create the connector.
     * @returns {Promise<ClientResponse<ConnectorResponse>>}
     */
    FusionAuthClient.prototype.createConnector = function (connectorId, request) {
        return this.start()
            .withUri('/api/connector')
            .withUriSegment(connectorId)
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Creates a user consent type. You can optionally specify an Id for the consent type, if not provided one will be generated.
     *
     * @param {UUID} consentId (Optional) The Id for the consent. If not provided a secure random UUID will be generated.
     * @param {ConsentRequest} request The request object that contains all of the information used to create the consent.
     * @returns {Promise<ClientResponse<ConsentResponse>>}
     */
    FusionAuthClient.prototype.createConsent = function (consentId, request) {
        return this.start()
            .withUri('/api/consent')
            .withUriSegment(consentId)
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Creates an email template. You can optionally specify an Id for the template, if not provided one will be generated.
     *
     * @param {UUID} emailTemplateId (Optional) The Id for the template. If not provided a secure random UUID will be generated.
     * @param {EmailTemplateRequest} request The request object that contains all of the information used to create the email template.
     * @returns {Promise<ClientResponse<EmailTemplateResponse>>}
     */
    FusionAuthClient.prototype.createEmailTemplate = function (emailTemplateId, request) {
        return this.start()
            .withUri('/api/email/template')
            .withUriSegment(emailTemplateId)
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Creates a family with the user id in the request as the owner and sole member of the family. You can optionally specify an id for the
     * family, if not provided one will be generated.
     *
     * @param {UUID} familyId (Optional) The id for the family. If not provided a secure random UUID will be generated.
     * @param {FamilyRequest} request The request object that contains all of the information used to create the family.
     * @returns {Promise<ClientResponse<FamilyResponse>>}
     */
    FusionAuthClient.prototype.createFamily = function (familyId, request) {
        return this.start()
            .withUri('/api/user/family')
            .withUriSegment(familyId)
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Creates a form.  You can optionally specify an Id for the form, if not provided one will be generated.
     *
     * @param {UUID} formId (Optional) The Id for the form. If not provided a secure random UUID will be generated.
     * @param {FormRequest} request The request object that contains all of the information used to create the form.
     * @returns {Promise<ClientResponse<FormResponse>>}
     */
    FusionAuthClient.prototype.createForm = function (formId, request) {
        return this.start()
            .withUri('/api/form')
            .withUriSegment(formId)
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Creates a form field.  You can optionally specify an Id for the form, if not provided one will be generated.
     *
     * @param {UUID} fieldId (Optional) The Id for the form field. If not provided a secure random UUID will be generated.
     * @param {FormFieldRequest} request The request object that contains all of the information used to create the form field.
     * @returns {Promise<ClientResponse<FormFieldResponse>>}
     */
    FusionAuthClient.prototype.createFormField = function (fieldId, request) {
        return this.start()
            .withUri('/api/form/field')
            .withUriSegment(fieldId)
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Creates a group. You can optionally specify an Id for the group, if not provided one will be generated.
     *
     * @param {UUID} groupId (Optional) The Id for the group. If not provided a secure random UUID will be generated.
     * @param {GroupRequest} request The request object that contains all of the information used to create the group.
     * @returns {Promise<ClientResponse<GroupResponse>>}
     */
    FusionAuthClient.prototype.createGroup = function (groupId, request) {
        return this.start()
            .withUri('/api/group')
            .withUriSegment(groupId)
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Creates a member in a group.
     *
     * @param {MemberRequest} request The request object that contains all of the information used to create the group member(s).
     * @returns {Promise<ClientResponse<MemberResponse>>}
     */
    FusionAuthClient.prototype.createGroupMembers = function (request) {
        return this.start()
            .withUri('/api/group/member')
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Creates an identity provider. You can optionally specify an Id for the identity provider, if not provided one will be generated.
     *
     * @param {UUID} identityProviderId (Optional) The Id of the identity provider. If not provided a secure random UUID will be generated.
     * @param {IdentityProviderRequest} request The request object that contains all of the information used to create the identity provider.
     * @returns {Promise<ClientResponse<IdentityProviderResponse>>}
     */
    FusionAuthClient.prototype.createIdentityProvider = function (identityProviderId, request) {
        return this.start()
            .withUri('/api/identity-provider')
            .withUriSegment(identityProviderId)
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Creates a Lambda. You can optionally specify an Id for the lambda, if not provided one will be generated.
     *
     * @param {UUID} lambdaId (Optional) The Id for the lambda. If not provided a secure random UUID will be generated.
     * @param {LambdaRequest} request The request object that contains all of the information used to create the lambda.
     * @returns {Promise<ClientResponse<LambdaResponse>>}
     */
    FusionAuthClient.prototype.createLambda = function (lambdaId, request) {
        return this.start()
            .withUri('/api/lambda')
            .withUriSegment(lambdaId)
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Creates a tenant. You can optionally specify an Id for the tenant, if not provided one will be generated.
     *
     * @param {UUID} tenantId (Optional) The Id for the tenant. If not provided a secure random UUID will be generated.
     * @param {TenantRequest} request The request object that contains all of the information used to create the tenant.
     * @returns {Promise<ClientResponse<TenantResponse>>}
     */
    FusionAuthClient.prototype.createTenant = function (tenantId, request) {
        return this.start()
            .withUri('/api/tenant')
            .withUriSegment(tenantId)
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Creates a Theme. You can optionally specify an Id for the theme, if not provided one will be generated.
     *
     * @param {UUID} themeId (Optional) The Id for the theme. If not provided a secure random UUID will be generated.
     * @param {ThemeRequest} request The request object that contains all of the information used to create the theme.
     * @returns {Promise<ClientResponse<ThemeResponse>>}
     */
    FusionAuthClient.prototype.createTheme = function (themeId, request) {
        return this.start()
            .withUri('/api/theme')
            .withUriSegment(themeId)
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Creates a user. You can optionally specify an Id for the user, if not provided one will be generated.
     *
     * @param {UUID} userId (Optional) The Id for the user. If not provided a secure random UUID will be generated.
     * @param {UserRequest} request The request object that contains all of the information used to create the user.
     * @returns {Promise<ClientResponse<UserResponse>>}
     */
    FusionAuthClient.prototype.createUser = function (userId, request) {
        return this.start()
            .withUri('/api/user')
            .withUriSegment(userId)
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Creates a user action. This action cannot be taken on a user until this call successfully returns. Anytime after
     * that the user action can be applied to any user.
     *
     * @param {UUID} userActionId (Optional) The Id for the user action. If not provided a secure random UUID will be generated.
     * @param {UserActionRequest} request The request object that contains all of the information used to create the user action.
     * @returns {Promise<ClientResponse<UserActionResponse>>}
     */
    FusionAuthClient.prototype.createUserAction = function (userActionId, request) {
        return this.start()
            .withUri('/api/user-action')
            .withUriSegment(userActionId)
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Creates a user reason. This user action reason cannot be used when actioning a user until this call completes
     * successfully. Anytime after that the user action reason can be used.
     *
     * @param {UUID} userActionReasonId (Optional) The Id for the user action reason. If not provided a secure random UUID will be generated.
     * @param {UserActionReasonRequest} request The request object that contains all of the information used to create the user action reason.
     * @returns {Promise<ClientResponse<UserActionReasonResponse>>}
     */
    FusionAuthClient.prototype.createUserActionReason = function (userActionReasonId, request) {
        return this.start()
            .withUri('/api/user-action-reason')
            .withUriSegment(userActionReasonId)
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Creates a single User consent.
     *
     * @param {UUID} userConsentId (Optional) The Id for the User consent. If not provided a secure random UUID will be generated.
     * @param {UserConsentRequest} request The request that contains the user consent information.
     * @returns {Promise<ClientResponse<UserConsentResponse>>}
     */
    FusionAuthClient.prototype.createUserConsent = function (userConsentId, request) {
        return this.start()
            .withUri('/api/user/consent')
            .withUriSegment(userConsentId)
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Creates a webhook. You can optionally specify an Id for the webhook, if not provided one will be generated.
     *
     * @param {UUID} webhookId (Optional) The Id for the webhook. If not provided a secure random UUID will be generated.
     * @param {WebhookRequest} request The request object that contains all of the information used to create the webhook.
     * @returns {Promise<ClientResponse<WebhookResponse>>}
     */
    FusionAuthClient.prototype.createWebhook = function (webhookId, request) {
        return this.start()
            .withUri('/api/webhook')
            .withUriSegment(webhookId)
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Deactivates the application with the given Id.
     *
     * @param {UUID} applicationId The Id of the application to deactivate.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.deactivateApplication = function (applicationId) {
        return this.start()
            .withUri('/api/application')
            .withUriSegment(applicationId)
            .withMethod("DELETE")
            .go();
    };
    /**
     * Deactivates the user with the given Id.
     *
     * @param {UUID} userId The Id of the user to deactivate.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.deactivateUser = function (userId) {
        return this.start()
            .withUri('/api/user')
            .withUriSegment(userId)
            .withMethod("DELETE")
            .go();
    };
    /**
     * Deactivates the user action with the given Id.
     *
     * @param {UUID} userActionId The Id of the user action to deactivate.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.deactivateUserAction = function (userActionId) {
        return this.start()
            .withUri('/api/user-action')
            .withUriSegment(userActionId)
            .withMethod("DELETE")
            .go();
    };
    /**
     * Deactivates the users with the given ids.
     *
     * @param {Array<string>} userIds The ids of the users to deactivate.
     * @returns {Promise<ClientResponse<UserDeleteResponse>>}
     *
     * @deprecated This method has been renamed to deactivateUsersByIds, use that method instead.
     */
    FusionAuthClient.prototype.deactivateUsers = function (userIds) {
        return this.start()
            .withUri('/api/user/bulk')
            .withParameter('userId', userIds)
            .withParameter('dryRun', false)
            .withParameter('hardDelete', false)
            .withMethod("DELETE")
            .go();
    };
    /**
     * Deactivates the users with the given ids.
     *
     * @param {Array<string>} userIds The ids of the users to deactivate.
     * @returns {Promise<ClientResponse<UserDeleteResponse>>}
     */
    FusionAuthClient.prototype.deactivateUsersByIds = function (userIds) {
        return this.start()
            .withUri('/api/user/bulk')
            .withParameter('userId', userIds)
            .withParameter('dryRun', false)
            .withParameter('hardDelete', false)
            .withMethod("DELETE")
            .go();
    };
    /**
     * Hard deletes an application. This is a dangerous operation and should not be used in most circumstances. This will
     * delete the application, any registrations for that application, metrics and reports for the application, all the
     * roles for the application, and any other data associated with the application. This operation could take a very
     * long time, depending on the amount of data in your database.
     *
     * @param {UUID} applicationId The Id of the application to delete.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.deleteApplication = function (applicationId) {
        return this.start()
            .withUri('/api/application')
            .withUriSegment(applicationId)
            .withParameter('hardDelete', true)
            .withMethod("DELETE")
            .go();
    };
    /**
     * Hard deletes an application role. This is a dangerous operation and should not be used in most circumstances. This
     * permanently removes the given role from all users that had it.
     *
     * @param {UUID} applicationId The Id of the application to deactivate.
     * @param {UUID} roleId The Id of the role to delete.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.deleteApplicationRole = function (applicationId, roleId) {
        return this.start()
            .withUri('/api/application')
            .withUriSegment(applicationId)
            .withUriSegment("role")
            .withUriSegment(roleId)
            .withMethod("DELETE")
            .go();
    };
    /**
     * Deletes the connector for the given Id.
     *
     * @param {UUID} connectorId The Id of the connector to delete.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.deleteConnector = function (connectorId) {
        return this.start()
            .withUri('/api/connector')
            .withUriSegment(connectorId)
            .withMethod("DELETE")
            .go();
    };
    /**
     * Deletes the consent for the given Id.
     *
     * @param {UUID} consentId The Id of the consent to delete.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.deleteConsent = function (consentId) {
        return this.start()
            .withUri('/api/consent')
            .withUriSegment(consentId)
            .withMethod("DELETE")
            .go();
    };
    /**
     * Deletes the email template for the given Id.
     *
     * @param {UUID} emailTemplateId The Id of the email template to delete.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.deleteEmailTemplate = function (emailTemplateId) {
        return this.start()
            .withUri('/api/email/template')
            .withUriSegment(emailTemplateId)
            .withMethod("DELETE")
            .go();
    };
    /**
     * Deletes the form for the given Id.
     *
     * @param {UUID} formId The Id of the form to delete.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.deleteForm = function (formId) {
        return this.start()
            .withUri('/api/form')
            .withUriSegment(formId)
            .withMethod("DELETE")
            .go();
    };
    /**
     * Deletes the form field for the given Id.
     *
     * @param {UUID} fieldId The Id of the form field to delete.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.deleteFormField = function (fieldId) {
        return this.start()
            .withUri('/api/form/field')
            .withUriSegment(fieldId)
            .withMethod("DELETE")
            .go();
    };
    /**
     * Deletes the group for the given Id.
     *
     * @param {UUID} groupId The Id of the group to delete.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.deleteGroup = function (groupId) {
        return this.start()
            .withUri('/api/group')
            .withUriSegment(groupId)
            .withMethod("DELETE")
            .go();
    };
    /**
     * Removes users as members of a group.
     *
     * @param {MemberDeleteRequest} request The member request that contains all of the information used to remove members to the group.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.deleteGroupMembers = function (request) {
        return this.start()
            .withUri('/api/group/member')
            .withJSONBody(request)
            .withMethod("DELETE")
            .go();
    };
    /**
     * Deletes the identity provider for the given Id.
     *
     * @param {UUID} identityProviderId The Id of the identity provider to delete.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.deleteIdentityProvider = function (identityProviderId) {
        return this.start()
            .withUri('/api/identity-provider')
            .withUriSegment(identityProviderId)
            .withMethod("DELETE")
            .go();
    };
    /**
     * Deletes the key for the given Id.
     *
     * @param {UUID} keyId The Id of the key to delete.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.deleteKey = function (keyId) {
        return this.start()
            .withUri('/api/key')
            .withUriSegment(keyId)
            .withMethod("DELETE")
            .go();
    };
    /**
     * Deletes the lambda for the given Id.
     *
     * @param {UUID} lambdaId The Id of the lambda to delete.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.deleteLambda = function (lambdaId) {
        return this.start()
            .withUri('/api/lambda')
            .withUriSegment(lambdaId)
            .withMethod("DELETE")
            .go();
    };
    /**
     * Deletes the user registration for the given user and application.
     *
     * @param {UUID} userId The Id of the user whose registration is being deleted.
     * @param {UUID} applicationId The Id of the application to remove the registration for.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.deleteRegistration = function (userId, applicationId) {
        return this.start()
            .withUri('/api/user/registration')
            .withUriSegment(userId)
            .withUriSegment(applicationId)
            .withMethod("DELETE")
            .go();
    };
    /**
     * Deletes the tenant for the given Id.
     *
     * @param {UUID} tenantId The Id of the tenant to delete.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.deleteTenant = function (tenantId) {
        return this.start()
            .withUri('/api/tenant')
            .withUriSegment(tenantId)
            .withMethod("DELETE")
            .go();
    };
    /**
     * Deletes the tenant for the given Id asynchronously.
     * This method is helpful if you do not want to wait for the delete operation to complete.
     *
     * @param {UUID} tenantId The Id of the tenant to delete.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.deleteTenantAsync = function (tenantId) {
        return this.start()
            .withUri('/api/tenant')
            .withUriSegment(tenantId)
            .withParameter('async', true)
            .withMethod("DELETE")
            .go();
    };
    /**
     * Deletes the theme for the given Id.
     *
     * @param {UUID} themeId The Id of the theme to delete.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.deleteTheme = function (themeId) {
        return this.start()
            .withUri('/api/theme')
            .withUriSegment(themeId)
            .withMethod("DELETE")
            .go();
    };
    /**
     * Deletes the user for the given Id. This permanently deletes all information, metrics, reports and data associated
     * with the user.
     *
     * @param {UUID} userId The Id of the user to delete.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.deleteUser = function (userId) {
        return this.start()
            .withUri('/api/user')
            .withUriSegment(userId)
            .withParameter('hardDelete', true)
            .withMethod("DELETE")
            .go();
    };
    /**
     * Deletes the user action for the given Id. This permanently deletes the user action and also any history and logs of
     * the action being applied to any users.
     *
     * @param {UUID} userActionId The Id of the user action to delete.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.deleteUserAction = function (userActionId) {
        return this.start()
            .withUri('/api/user-action')
            .withUriSegment(userActionId)
            .withParameter('hardDelete', true)
            .withMethod("DELETE")
            .go();
    };
    /**
     * Deletes the user action reason for the given Id.
     *
     * @param {UUID} userActionReasonId The Id of the user action reason to delete.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.deleteUserActionReason = function (userActionReasonId) {
        return this.start()
            .withUri('/api/user-action-reason')
            .withUriSegment(userActionReasonId)
            .withMethod("DELETE")
            .go();
    };
    /**
     * Deletes the users with the given ids, or users matching the provided JSON query or queryString.
     * The order of preference is ids, query and then queryString, it is recommended to only provide one of the three for the request.
     *
     * This method can be used to deactivate or permanently delete (hard-delete) users based upon the hardDelete boolean in the request body.
     * Using the dryRun parameter you may also request the result of the action without actually deleting or deactivating any users.
     *
     * @param {UserDeleteRequest} request The UserDeleteRequest.
     * @returns {Promise<ClientResponse<UserDeleteResponse>>}
     *
     * @deprecated This method has been renamed to deleteUsersByQuery, use that method instead.
     */
    FusionAuthClient.prototype.deleteUsers = function (request) {
        return this.start()
            .withUri('/api/user/bulk')
            .withJSONBody(request)
            .withMethod("DELETE")
            .go();
    };
    /**
     * Deletes the users with the given ids, or users matching the provided JSON query or queryString.
     * The order of preference is ids, query and then queryString, it is recommended to only provide one of the three for the request.
     *
     * This method can be used to deactivate or permanently delete (hard-delete) users based upon the hardDelete boolean in the request body.
     * Using the dryRun parameter you may also request the result of the action without actually deleting or deactivating any users.
     *
     * @param {UserDeleteRequest} request The UserDeleteRequest.
     * @returns {Promise<ClientResponse<UserDeleteResponse>>}
     */
    FusionAuthClient.prototype.deleteUsersByQuery = function (request) {
        return this.start()
            .withUri('/api/user/bulk')
            .withJSONBody(request)
            .withMethod("DELETE")
            .go();
    };
    /**
     * Deletes the webhook for the given Id.
     *
     * @param {UUID} webhookId The Id of the webhook to delete.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.deleteWebhook = function (webhookId) {
        return this.start()
            .withUri('/api/webhook')
            .withUriSegment(webhookId)
            .withMethod("DELETE")
            .go();
    };
    /**
     * Disable Two Factor authentication for a user.
     *
     * @param {UUID} userId The Id of the User for which you're disabling Two Factor authentication.
     * @param {string} code The Two Factor code used verify the the caller knows the Two Factor secret.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.disableTwoFactor = function (userId, code) {
        return this.start()
            .withUri('/api/user/two-factor')
            .withParameter('userId', userId)
            .withParameter('code', code)
            .withMethod("DELETE")
            .go();
    };
    /**
     * Enable Two Factor authentication for a user.
     *
     * @param {UUID} userId The Id of the user to enable Two Factor authentication.
     * @param {TwoFactorRequest} request The two factor enable request information.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.enableTwoFactor = function (userId, request) {
        return this.start()
            .withUri('/api/user/two-factor')
            .withUriSegment(userId)
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Exchanges an OAuth authorization code for an access token.
     * Makes a request to the Token endpoint to exchange the authorization code returned from the Authorize endpoint for an access token.
     *
     * @param {string} code The authorization code returned on the /oauth2/authorize response.
     * @param {string} client_id The unique client identifier. The client Id is the Id of the FusionAuth Application in which you you are attempting to authenticate.
     * @param {string} client_secret (Optional) The client secret. This value will be required if client authentication is enabled.
     * @param {string} redirect_uri The URI to redirect to upon a successful request.
     * @returns {Promise<ClientResponse<AccessToken>>}
     */
    FusionAuthClient.prototype.exchangeOAuthCodeForAccessToken = function (code, client_id, client_secret, redirect_uri) {
        var body = new url_1.URLSearchParams();
        body.append('code', code);
        body.append('client_id', client_id);
        body.append('client_secret', client_secret);
        body.append('grant_type', 'authorization_code');
        body.append('redirect_uri', redirect_uri);
        return this.startAnonymous()
            .withUri('/oauth2/token')
            .withFormData(body)
            .withMethod("POST")
            .go();
    };
    /**
     * Exchanges an OAuth authorization code and code_verifier for an access token.
     * Makes a request to the Token endpoint to exchange the authorization code returned from the Authorize endpoint and a code_verifier for an access token.
     *
     * @param {string} code The authorization code returned on the /oauth2/authorize response.
     * @param {string} client_id (Optional) The unique client identifier. The client Id is the Id of the FusionAuth Application in which you you are attempting to authenticate. This parameter is optional when the Authorization header is provided.
     * @param {string} client_secret (Optional) The client secret. This value may optionally be provided in the request body instead of the Authorization header.
     * @param {string} redirect_uri The URI to redirect to upon a successful request.
     * @param {string} code_verifier The random string generated previously. Will be compared with the code_challenge sent previously, which allows the OAuth provider to authenticate your app.
     * @returns {Promise<ClientResponse<AccessToken>>}
     */
    FusionAuthClient.prototype.exchangeOAuthCodeForAccessTokenUsingPKCE = function (code, client_id, client_secret, redirect_uri, code_verifier) {
        var body = new url_1.URLSearchParams();
        body.append('code', code);
        body.append('client_id', client_id);
        body.append('client_secret', client_secret);
        body.append('grant_type', 'authorization_code');
        body.append('redirect_uri', redirect_uri);
        body.append('code_verifier', code_verifier);
        return this.startAnonymous()
            .withUri('/oauth2/token')
            .withFormData(body)
            .withMethod("POST")
            .go();
    };
    /**
     * Exchange a Refresh Token for an Access Token.
     * If you will be using the Refresh Token Grant, you will make a request to the Token endpoint to exchange the user’s refresh token for an access token.
     *
     * @param {string} refresh_token The refresh token that you would like to use to exchange for an access token.
     * @param {string} client_id (Optional) The unique client identifier. The client Id is the Id of the FusionAuth Application in which you you are attempting to authenticate. This parameter is optional when the Authorization header is provided.
     * @param {string} client_secret (Optional) The client secret. This value may optionally be provided in the request body instead of the Authorization header.
     * @param {string} scope (Optional) This parameter is optional and if omitted, the same scope requested during the authorization request will be used. If provided the scopes must match those requested during the initial authorization request.
     * @param {string} user_code (Optional) The end-user verification code. This code is required if using this endpoint to approve the Device Authorization.
     * @returns {Promise<ClientResponse<AccessToken>>}
     */
    FusionAuthClient.prototype.exchangeRefreshTokenForAccessToken = function (refresh_token, client_id, client_secret, scope, user_code) {
        var body = new url_1.URLSearchParams();
        body.append('refresh_token', refresh_token);
        body.append('client_id', client_id);
        body.append('client_secret', client_secret);
        body.append('grant_type', 'refresh_token');
        body.append('scope', scope);
        body.append('user_code', user_code);
        return this.startAnonymous()
            .withUri('/oauth2/token')
            .withFormData(body)
            .withMethod("POST")
            .go();
    };
    /**
     * Exchange a refresh token for a new JWT.
     *
     * @param {RefreshRequest} request The refresh request.
     * @returns {Promise<ClientResponse<RefreshResponse>>}
     */
    FusionAuthClient.prototype.exchangeRefreshTokenForJWT = function (request) {
        return this.startAnonymous()
            .withUri('/api/jwt/refresh')
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Exchange User Credentials for a Token.
     * If you will be using the Resource Owner Password Credential Grant, you will make a request to the Token endpoint to exchange the user’s email and password for an access token.
     *
     * @param {string} username The login identifier of the user. The login identifier can be either the email or the username.
     * @param {string} password The user’s password.
     * @param {string} client_id (Optional) The unique client identifier. The client Id is the Id of the FusionAuth Application in which you you are attempting to authenticate. This parameter is optional when the Authorization header is provided.
     * @param {string} client_secret (Optional) The client secret. This value may optionally be provided in the request body instead of the Authorization header.
     * @param {string} scope (Optional) This parameter is optional and if omitted, the same scope requested during the authorization request will be used. If provided the scopes must match those requested during the initial authorization request.
     * @param {string} user_code (Optional) The end-user verification code. This code is required if using this endpoint to approve the Device Authorization.
     * @returns {Promise<ClientResponse<AccessToken>>}
     */
    FusionAuthClient.prototype.exchangeUserCredentialsForAccessToken = function (username, password, client_id, client_secret, scope, user_code) {
        var body = new url_1.URLSearchParams();
        body.append('username', username);
        body.append('password', password);
        body.append('client_id', client_id);
        body.append('client_secret', client_secret);
        body.append('grant_type', 'password');
        body.append('scope', scope);
        body.append('user_code', user_code);
        return this.startAnonymous()
            .withUri('/oauth2/token')
            .withFormData(body)
            .withMethod("POST")
            .go();
    };
    /**
     * Begins the forgot password sequence, which kicks off an email to the user so that they can reset their password.
     *
     * @param {ForgotPasswordRequest} request The request that contains the information about the user so that they can be emailed.
     * @returns {Promise<ClientResponse<ForgotPasswordResponse>>}
     */
    FusionAuthClient.prototype.forgotPassword = function (request) {
        return this.start()
            .withUri('/api/user/forgot-password')
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Generate a new Email Verification Id to be used with the Verify Email API. This API will not attempt to send an
     * email to the User. This API may be used to collect the verificationId for use with a third party system.
     *
     * @param {string} email The email address of the user that needs a new verification email.
     * @returns {Promise<ClientResponse<VerifyEmailResponse>>}
     */
    FusionAuthClient.prototype.generateEmailVerificationId = function (email) {
        return this.start()
            .withUri('/api/user/verify-email')
            .withParameter('email', email)
            .withParameter('sendVerifyEmail', false)
            .withMethod("PUT")
            .go();
    };
    /**
     * Generate a new RSA or EC key pair or an HMAC secret.
     *
     * @param {UUID} keyId (Optional) The Id for the key. If not provided a secure random UUID will be generated.
     * @param {KeyRequest} request The request object that contains all of the information used to create the key.
     * @returns {Promise<ClientResponse<KeyResponse>>}
     */
    FusionAuthClient.prototype.generateKey = function (keyId, request) {
        return this.start()
            .withUri('/api/key/generate')
            .withUriSegment(keyId)
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Generate a new Application Registration Verification Id to be used with the Verify Registration API. This API will not attempt to send an
     * email to the User. This API may be used to collect the verificationId for use with a third party system.
     *
     * @param {string} email The email address of the user that needs a new verification email.
     * @param {UUID} applicationId The Id of the application to be verified.
     * @returns {Promise<ClientResponse<VerifyRegistrationResponse>>}
     */
    FusionAuthClient.prototype.generateRegistrationVerificationId = function (email, applicationId) {
        return this.start()
            .withUri('/api/user/verify-registration')
            .withParameter('email', email)
            .withParameter('sendVerifyPasswordEmail', false)
            .withParameter('applicationId', applicationId)
            .withMethod("PUT")
            .go();
    };
    /**
     * Generate a Two Factor secret that can be used to enable Two Factor authentication for a User. The response will contain
     * both the secret and a Base32 encoded form of the secret which can be shown to a User when using a 2 Step Authentication
     * application such as Google Authenticator.
     *
     * @returns {Promise<ClientResponse<SecretResponse>>}
     */
    FusionAuthClient.prototype.generateTwoFactorSecret = function () {
        return this.start()
            .withUri('/api/two-factor/secret')
            .withMethod("GET")
            .go();
    };
    /**
     * Generate a Two Factor secret that can be used to enable Two Factor authentication for a User. The response will contain
     * both the secret and a Base32 encoded form of the secret which can be shown to a User when using a 2 Step Authentication
     * application such as Google Authenticator.
     *
     * @param {string} encodedJWT The encoded JWT (access token).
     * @returns {Promise<ClientResponse<SecretResponse>>}
     */
    FusionAuthClient.prototype.generateTwoFactorSecretUsingJWT = function (encodedJWT) {
        return this.startAnonymous()
            .withUri('/api/two-factor/secret')
            .withAuthorization('Bearer ' + encodedJWT)
            .withMethod("GET")
            .go();
    };
    /**
     * Handles login via third-parties including Social login, external OAuth and OpenID Connect, and other
     * login systems.
     *
     * @param {IdentityProviderLoginRequest} request The third-party login request that contains information from the third-party login
     *    providers that FusionAuth uses to reconcile the user's account.
     * @returns {Promise<ClientResponse<LoginResponse>>}
     */
    FusionAuthClient.prototype.identityProviderLogin = function (request) {
        return this.startAnonymous()
            .withUri('/api/identity-provider/login')
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Import an existing RSA or EC key pair or an HMAC secret.
     *
     * @param {UUID} keyId (Optional) The Id for the key. If not provided a secure random UUID will be generated.
     * @param {KeyRequest} request The request object that contains all of the information used to create the key.
     * @returns {Promise<ClientResponse<KeyResponse>>}
     */
    FusionAuthClient.prototype.importKey = function (keyId, request) {
        return this.start()
            .withUri('/api/key/import')
            .withUriSegment(keyId)
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Bulk imports refresh tokens. This request performs minimal validation and runs batch inserts of refresh tokens with the
     * expectation that each token represents a user that already exists and is registered for the corresponding FusionAuth
     * Application. This is done to increases the insert performance.
     *
     * Therefore, if you encounter an error due to a database key violation, the response will likely offer a generic
     * explanation. If you encounter an error, you may optionally enable additional validation to receive a JSON response
     * body with specific validation errors. This will slow the request down but will allow you to identify the cause of
     * the failure. See the validateDbConstraints request parameter.
     *
     * @param {RefreshTokenImportRequest} request The request that contains all of the information about all of the refresh tokens to import.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.importRefreshTokens = function (request) {
        return this.start()
            .withUri('/api/user/refresh-token/import')
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Bulk imports users. This request performs minimal validation and runs batch inserts of users with the expectation
     * that each user does not yet exist and each registration corresponds to an existing FusionAuth Application. This is done to
     * increases the insert performance.
     *
     * Therefore, if you encounter an error due to a database key violation, the response will likely offer
     * a generic explanation. If you encounter an error, you may optionally enable additional validation to receive a JSON response
     * body with specific validation errors. This will slow the request down but will allow you to identify the cause of the failure. See
     * the validateDbConstraints request parameter.
     *
     * @param {ImportRequest} request The request that contains all of the information about all of the users to import.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.importUsers = function (request) {
        return this.start()
            .withUri('/api/user/import')
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Inspect an access token issued by FusionAuth.
     *
     * @param {string} client_id The unique client identifier. The client Id is the Id of the FusionAuth Application for which this token was generated.
     * @param {string} token The access token returned by this OAuth provider as the result of a successful authentication.
     * @returns {Promise<ClientResponse<IntrospectResponse>>}
     */
    FusionAuthClient.prototype.introspectAccessToken = function (client_id, token) {
        var body = new url_1.URLSearchParams();
        body.append('client_id', client_id);
        body.append('token', token);
        return this.startAnonymous()
            .withUri('/oauth2/introspect')
            .withFormData(body)
            .withMethod("POST")
            .go();
    };
    /**
     * Issue a new access token (JWT) for the requested Application after ensuring the provided JWT is valid. A valid
     * access token is properly signed and not expired.
     * <p>
     * This API may be used in an SSO configuration to issue new tokens for another application after the user has
     * obtained a valid token from authentication.
     *
     * @param {UUID} applicationId The Application Id for which you are requesting a new access token be issued.
     * @param {string} encodedJWT The encoded JWT (access token).
     * @param {string} refreshToken (Optional) An existing refresh token used to request a refresh token in addition to a JWT in the response.
     *    <p>The target application represented by the applicationId request parameter must have refresh
     *    tokens enabled in order to receive a refresh token in the response.</p>
     * @returns {Promise<ClientResponse<IssueResponse>>}
     */
    FusionAuthClient.prototype.issueJWT = function (applicationId, encodedJWT, refreshToken) {
        return this.startAnonymous()
            .withUri('/api/jwt/issue')
            .withAuthorization('Bearer ' + encodedJWT)
            .withParameter('applicationId', applicationId)
            .withParameter('refreshToken', refreshToken)
            .withMethod("GET")
            .go();
    };
    /**
     * Authenticates a user to FusionAuth.
     *
     * This API optionally requires an API key. See <code>Application.loginConfiguration.requireAuthentication</code>.
     *
     * @param {LoginRequest} request The login request that contains the user credentials used to log them in.
     * @returns {Promise<ClientResponse<LoginResponse>>}
     */
    FusionAuthClient.prototype.login = function (request) {
        return this.start()
            .withUri('/api/login')
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Sends a ping to FusionAuth indicating that the user was automatically logged into an application. When using
     * FusionAuth's SSO or your own, you should call this if the user is already logged in centrally, but accesses an
     * application where they no longer have a session. This helps correctly track login counts, times and helps with
     * reporting.
     *
     * @param {UUID} userId The Id of the user that was logged in.
     * @param {UUID} applicationId The Id of the application that they logged into.
     * @param {string} callerIPAddress (Optional) The IP address of the end-user that is logging in. If a null value is provided
     *    the IP address will be that of the client or last proxy that sent the request.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.loginPing = function (userId, applicationId, callerIPAddress) {
        return this.start()
            .withUri('/api/login')
            .withUriSegment(userId)
            .withUriSegment(applicationId)
            .withParameter('ipAddress', callerIPAddress)
            .withMethod("PUT")
            .go();
    };
    /**
     * The Logout API is intended to be used to remove the refresh token and access token cookies if they exist on the
     * client and revoke the refresh token stored. This API does nothing if the request does not contain an access
     * token or refresh token cookies.
     *
     * @param {boolean} global When this value is set to true all of the refresh tokens issued to the owner of the
     *    provided token will be revoked.
     * @param {string} refreshToken (Optional) The refresh_token as a request parameter instead of coming in via a cookie.
     *    If provided this takes precedence over the cookie.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.logout = function (global, refreshToken) {
        return this.startAnonymous()
            .withHeader('Content-Type', 'text/plain')
            .withUri('/api/logout')
            .withParameter('global', global)
            .withParameter('refreshToken', refreshToken)
            .withMethod("POST")
            .go();
    };
    /**
     * Retrieves the identity provider for the given domain. A 200 response code indicates the domain is managed
     * by a registered identity provider. A 404 indicates the domain is not managed.
     *
     * @param {string} domain The domain or email address to lookup.
     * @returns {Promise<ClientResponse<LookupResponse>>}
     */
    FusionAuthClient.prototype.lookupIdentityProvider = function (domain) {
        return this.start()
            .withUri('/api/identity-provider/lookup')
            .withParameter('domain', domain)
            .withMethod("GET")
            .go();
    };
    /**
     * Modifies a temporal user action by changing the expiration of the action and optionally adding a comment to the
     * action.
     *
     * @param {UUID} actionId The Id of the action to modify. This is technically the user action log id.
     * @param {ActionRequest} request The request that contains all of the information about the modification.
     * @returns {Promise<ClientResponse<ActionResponse>>}
     */
    FusionAuthClient.prototype.modifyAction = function (actionId, request) {
        return this.start()
            .withUri('/api/user/action')
            .withUriSegment(actionId)
            .withJSONBody(request)
            .withMethod("PUT")
            .go();
    };
    /**
     * Complete a login request using a passwordless code
     *
     * @param {PasswordlessLoginRequest} request The passwordless login request that contains all of the information used to complete login.
     * @returns {Promise<ClientResponse<LoginResponse>>}
     */
    FusionAuthClient.prototype.passwordlessLogin = function (request) {
        return this.startAnonymous()
            .withUri('/api/passwordless/login')
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Updates, via PATCH, the application with the given Id.
     *
     * @param {UUID} applicationId The Id of the application to update.
     * @param {ApplicationRequest} request The request that contains just the new application information.
     * @returns {Promise<ClientResponse<ApplicationResponse>>}
     */
    FusionAuthClient.prototype.patchApplication = function (applicationId, request) {
        return this.start()
            .withUri('/api/application')
            .withUriSegment(applicationId)
            .withJSONBody(request)
            .withMethod("PATCH")
            .go();
    };
    /**
     * Updates, via PATCH, the application role with the given id for the application.
     *
     * @param {UUID} applicationId The Id of the application that the role belongs to.
     * @param {UUID} roleId The Id of the role to update.
     * @param {ApplicationRequest} request The request that contains just the new role information.
     * @returns {Promise<ClientResponse<ApplicationResponse>>}
     */
    FusionAuthClient.prototype.patchApplicationRole = function (applicationId, roleId, request) {
        return this.start()
            .withUri('/api/application')
            .withUriSegment(applicationId)
            .withUriSegment("role")
            .withUriSegment(roleId)
            .withJSONBody(request)
            .withMethod("PATCH")
            .go();
    };
    /**
     * Updates, via PATCH, the connector with the given Id.
     *
     * @param {UUID} connectorId The Id of the connector to update.
     * @param {ConnectorRequest} request The request that contains just the new connector information.
     * @returns {Promise<ClientResponse<ConnectorResponse>>}
     */
    FusionAuthClient.prototype.patchConnector = function (connectorId, request) {
        return this.start()
            .withUri('/api/connector')
            .withUriSegment(connectorId)
            .withJSONBody(request)
            .withMethod("PATCH")
            .go();
    };
    /**
     * Updates, via PATCH, the consent with the given Id.
     *
     * @param {UUID} consentId The Id of the consent to update.
     * @param {ConsentRequest} request The request that contains just the new consent information.
     * @returns {Promise<ClientResponse<ConsentResponse>>}
     */
    FusionAuthClient.prototype.patchConsent = function (consentId, request) {
        return this.start()
            .withUri('/api/consent')
            .withUriSegment(consentId)
            .withJSONBody(request)
            .withMethod("PATCH")
            .go();
    };
    /**
     * Updates, via PATCH, the email template with the given Id.
     *
     * @param {UUID} emailTemplateId The Id of the email template to update.
     * @param {EmailTemplateRequest} request The request that contains just the new email template information.
     * @returns {Promise<ClientResponse<EmailTemplateResponse>>}
     */
    FusionAuthClient.prototype.patchEmailTemplate = function (emailTemplateId, request) {
        return this.start()
            .withUri('/api/email/template')
            .withUriSegment(emailTemplateId)
            .withJSONBody(request)
            .withMethod("PATCH")
            .go();
    };
    /**
     * Updates, via PATCH, the group with the given Id.
     *
     * @param {UUID} groupId The Id of the group to update.
     * @param {GroupRequest} request The request that contains just the new group information.
     * @returns {Promise<ClientResponse<GroupResponse>>}
     */
    FusionAuthClient.prototype.patchGroup = function (groupId, request) {
        return this.start()
            .withUri('/api/group')
            .withUriSegment(groupId)
            .withJSONBody(request)
            .withMethod("PATCH")
            .go();
    };
    /**
     * Updates, via PATCH, the identity provider with the given Id.
     *
     * @param {UUID} identityProviderId The Id of the identity provider to update.
     * @param {IdentityProviderRequest} request The request object that contains just the updated identity provider information.
     * @returns {Promise<ClientResponse<IdentityProviderResponse>>}
     */
    FusionAuthClient.prototype.patchIdentityProvider = function (identityProviderId, request) {
        return this.start()
            .withUri('/api/identity-provider')
            .withUriSegment(identityProviderId)
            .withJSONBody(request)
            .withMethod("PATCH")
            .go();
    };
    /**
     * Updates, via PATCH, the available integrations.
     *
     * @param {IntegrationRequest} request The request that contains just the new integration information.
     * @returns {Promise<ClientResponse<IntegrationResponse>>}
     */
    FusionAuthClient.prototype.patchIntegrations = function (request) {
        return this.start()
            .withUri('/api/integration')
            .withJSONBody(request)
            .withMethod("PATCH")
            .go();
    };
    /**
     * Updates, via PATCH, the lambda with the given Id.
     *
     * @param {UUID} lambdaId The Id of the lambda to update.
     * @param {LambdaRequest} request The request that contains just the new lambda information.
     * @returns {Promise<ClientResponse<LambdaResponse>>}
     */
    FusionAuthClient.prototype.patchLambda = function (lambdaId, request) {
        return this.start()
            .withUri('/api/lambda')
            .withUriSegment(lambdaId)
            .withJSONBody(request)
            .withMethod("PATCH")
            .go();
    };
    /**
     * Updates, via PATCH, the registration for the user with the given id and the application defined in the request.
     *
     * @param {UUID} userId The Id of the user whose registration is going to be updated.
     * @param {RegistrationRequest} request The request that contains just the new registration information.
     * @returns {Promise<ClientResponse<RegistrationResponse>>}
     */
    FusionAuthClient.prototype.patchRegistration = function (userId, request) {
        return this.start()
            .withUri('/api/user/registration')
            .withUriSegment(userId)
            .withJSONBody(request)
            .withMethod("PATCH")
            .go();
    };
    /**
     * Updates, via PATCH, the system configuration.
     *
     * @param {SystemConfigurationRequest} request The request that contains just the new system configuration information.
     * @returns {Promise<ClientResponse<SystemConfigurationResponse>>}
     */
    FusionAuthClient.prototype.patchSystemConfiguration = function (request) {
        return this.start()
            .withUri('/api/system-configuration')
            .withJSONBody(request)
            .withMethod("PATCH")
            .go();
    };
    /**
     * Updates, via PATCH, the tenant with the given Id.
     *
     * @param {UUID} tenantId The Id of the tenant to update.
     * @param {TenantRequest} request The request that contains just the new tenant information.
     * @returns {Promise<ClientResponse<TenantResponse>>}
     */
    FusionAuthClient.prototype.patchTenant = function (tenantId, request) {
        return this.start()
            .withUri('/api/tenant')
            .withUriSegment(tenantId)
            .withJSONBody(request)
            .withMethod("PATCH")
            .go();
    };
    /**
     * Updates, via PATCH, the theme with the given Id.
     *
     * @param {UUID} themeId The Id of the theme to update.
     * @param {ThemeRequest} request The request that contains just the new theme information.
     * @returns {Promise<ClientResponse<ThemeResponse>>}
     */
    FusionAuthClient.prototype.patchTheme = function (themeId, request) {
        return this.start()
            .withUri('/api/theme')
            .withUriSegment(themeId)
            .withJSONBody(request)
            .withMethod("PATCH")
            .go();
    };
    /**
     * Updates, via PATCH, the user with the given Id.
     *
     * @param {UUID} userId The Id of the user to update.
     * @param {UserRequest} request The request that contains just the new user information.
     * @returns {Promise<ClientResponse<UserResponse>>}
     */
    FusionAuthClient.prototype.patchUser = function (userId, request) {
        return this.start()
            .withUri('/api/user')
            .withUriSegment(userId)
            .withJSONBody(request)
            .withMethod("PATCH")
            .go();
    };
    /**
     * Updates, via PATCH, the user action with the given Id.
     *
     * @param {UUID} userActionId The Id of the user action to update.
     * @param {UserActionRequest} request The request that contains just the new user action information.
     * @returns {Promise<ClientResponse<UserActionResponse>>}
     */
    FusionAuthClient.prototype.patchUserAction = function (userActionId, request) {
        return this.start()
            .withUri('/api/user-action')
            .withUriSegment(userActionId)
            .withJSONBody(request)
            .withMethod("PATCH")
            .go();
    };
    /**
     * Updates, via PATCH, the user action reason with the given Id.
     *
     * @param {UUID} userActionReasonId The Id of the user action reason to update.
     * @param {UserActionReasonRequest} request The request that contains just the new user action reason information.
     * @returns {Promise<ClientResponse<UserActionReasonResponse>>}
     */
    FusionAuthClient.prototype.patchUserActionReason = function (userActionReasonId, request) {
        return this.start()
            .withUri('/api/user-action-reason')
            .withUriSegment(userActionReasonId)
            .withJSONBody(request)
            .withMethod("PATCH")
            .go();
    };
    /**
     * Updates, via PATCH, a single User consent by Id.
     *
     * @param {UUID} userConsentId The User Consent Id
     * @param {UserConsentRequest} request The request that contains just the new user consent information.
     * @returns {Promise<ClientResponse<UserConsentResponse>>}
     */
    FusionAuthClient.prototype.patchUserConsent = function (userConsentId, request) {
        return this.start()
            .withUri('/api/user/consent')
            .withUriSegment(userConsentId)
            .withJSONBody(request)
            .withMethod("PATCH")
            .go();
    };
    /**
     * Reactivates the application with the given Id.
     *
     * @param {UUID} applicationId The Id of the application to reactivate.
     * @returns {Promise<ClientResponse<ApplicationResponse>>}
     */
    FusionAuthClient.prototype.reactivateApplication = function (applicationId) {
        return this.start()
            .withUri('/api/application')
            .withUriSegment(applicationId)
            .withParameter('reactivate', true)
            .withMethod("PUT")
            .go();
    };
    /**
     * Reactivates the user with the given Id.
     *
     * @param {UUID} userId The Id of the user to reactivate.
     * @returns {Promise<ClientResponse<UserResponse>>}
     */
    FusionAuthClient.prototype.reactivateUser = function (userId) {
        return this.start()
            .withUri('/api/user')
            .withUriSegment(userId)
            .withParameter('reactivate', true)
            .withMethod("PUT")
            .go();
    };
    /**
     * Reactivates the user action with the given Id.
     *
     * @param {UUID} userActionId The Id of the user action to reactivate.
     * @returns {Promise<ClientResponse<UserActionResponse>>}
     */
    FusionAuthClient.prototype.reactivateUserAction = function (userActionId) {
        return this.start()
            .withUri('/api/user-action')
            .withUriSegment(userActionId)
            .withParameter('reactivate', true)
            .withMethod("PUT")
            .go();
    };
    /**
     * Reconcile a User to FusionAuth using JWT issued from another Identity Provider.
     *
     * @param {IdentityProviderLoginRequest} request The reconcile request that contains the data to reconcile the User.
     * @returns {Promise<ClientResponse<LoginResponse>>}
     */
    FusionAuthClient.prototype.reconcileJWT = function (request) {
        return this.startAnonymous()
            .withUri('/api/jwt/reconcile')
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Request a refresh of the User search index. This API is not generally necessary and the search index will become consistent in a
     * reasonable amount of time. There may be scenarios where you may wish to manually request an index refresh. One example may be
     * if you are using the Search API or Delete Tenant API immediately following a User Create etc, you may wish to request a refresh to
     *  ensure the index immediately current before making a query request to the search index.
     *
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.refreshUserSearchIndex = function () {
        return this.start()
            .withUri('/api/user/search')
            .withMethod("PUT")
            .go();
    };
    /**
     * Registers a user for an application. If you provide the User and the UserRegistration object on this request, it
     * will create the user as well as register them for the application. This is called a Full Registration. However, if
     * you only provide the UserRegistration object, then the user must already exist and they will be registered for the
     * application. The user id can also be provided and it will either be used to look up an existing user or it will be
     * used for the newly created User.
     *
     * @param {UUID} userId (Optional) The Id of the user being registered for the application and optionally created.
     * @param {RegistrationRequest} request The request that optionally contains the User and must contain the UserRegistration.
     * @returns {Promise<ClientResponse<RegistrationResponse>>}
     */
    FusionAuthClient.prototype.register = function (userId, request) {
        return this.start()
            .withUri('/api/user/registration')
            .withUriSegment(userId)
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Removes a user from the family with the given id.
     *
     * @param {UUID} familyId The id of the family to remove the user from.
     * @param {UUID} userId The id of the user to remove from the family.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.removeUserFromFamily = function (familyId, userId) {
        return this.start()
            .withUri('/api/user/family')
            .withUriSegment(familyId)
            .withUriSegment(userId)
            .withMethod("DELETE")
            .go();
    };
    /**
     * Re-sends the verification email to the user.
     *
     * @param {string} email The email address of the user that needs a new verification email.
     * @returns {Promise<ClientResponse<VerifyEmailResponse>>}
     */
    FusionAuthClient.prototype.resendEmailVerification = function (email) {
        return this.start()
            .withUri('/api/user/verify-email')
            .withParameter('email', email)
            .withMethod("PUT")
            .go();
    };
    /**
     * Re-sends the verification email to the user. If the Application has configured a specific email template this will be used
     * instead of the tenant configuration.
     *
     * @param {UUID} applicationId The unique Application Id to used to resolve an application specific email template.
     * @param {string} email The email address of the user that needs a new verification email.
     * @returns {Promise<ClientResponse<VerifyEmailResponse>>}
     */
    FusionAuthClient.prototype.resendEmailVerificationWithApplicationTemplate = function (applicationId, email) {
        return this.start()
            .withUri('/api/user/verify-email')
            .withParameter('applicationId', applicationId)
            .withParameter('email', email)
            .withMethod("PUT")
            .go();
    };
    /**
     * Re-sends the application registration verification email to the user.
     *
     * @param {string} email The email address of the user that needs a new verification email.
     * @param {UUID} applicationId The Id of the application to be verified.
     * @returns {Promise<ClientResponse<VerifyRegistrationResponse>>}
     */
    FusionAuthClient.prototype.resendRegistrationVerification = function (email, applicationId) {
        return this.start()
            .withUri('/api/user/verify-registration')
            .withParameter('email', email)
            .withParameter('applicationId', applicationId)
            .withMethod("PUT")
            .go();
    };
    /**
     * Retrieves a single action log (the log of a user action that was taken on a user previously) for the given Id.
     *
     * @param {UUID} actionId The Id of the action to retrieve.
     * @returns {Promise<ClientResponse<ActionResponse>>}
     */
    FusionAuthClient.prototype.retrieveAction = function (actionId) {
        return this.start()
            .withUri('/api/user/action')
            .withUriSegment(actionId)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves all of the actions for the user with the given Id. This will return all time based actions that are active,
     * and inactive as well as non-time based actions.
     *
     * @param {UUID} userId The Id of the user to fetch the actions for.
     * @returns {Promise<ClientResponse<ActionResponse>>}
     */
    FusionAuthClient.prototype.retrieveActions = function (userId) {
        return this.start()
            .withUri('/api/user/action')
            .withParameter('userId', userId)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves all of the actions for the user with the given Id that are currently preventing the User from logging in.
     *
     * @param {UUID} userId The Id of the user to fetch the actions for.
     * @returns {Promise<ClientResponse<ActionResponse>>}
     */
    FusionAuthClient.prototype.retrieveActionsPreventingLogin = function (userId) {
        return this.start()
            .withUri('/api/user/action')
            .withParameter('userId', userId)
            .withParameter('preventingLogin', true)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves all of the actions for the user with the given Id that are currently active.
     * An active action means one that is time based and has not been canceled, and has not ended.
     *
     * @param {UUID} userId The Id of the user to fetch the actions for.
     * @returns {Promise<ClientResponse<ActionResponse>>}
     */
    FusionAuthClient.prototype.retrieveActiveActions = function (userId) {
        return this.start()
            .withUri('/api/user/action')
            .withParameter('userId', userId)
            .withParameter('active', true)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the application for the given id or all of the applications if the id is null.
     *
     * @param {UUID} applicationId (Optional) The application id.
     * @returns {Promise<ClientResponse<ApplicationResponse>>}
     */
    FusionAuthClient.prototype.retrieveApplication = function (applicationId) {
        return this.start()
            .withUri('/api/application')
            .withUriSegment(applicationId)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves all of the applications.
     *
     * @returns {Promise<ClientResponse<ApplicationResponse>>}
     */
    FusionAuthClient.prototype.retrieveApplications = function () {
        return this.start()
            .withUri('/api/application')
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves a single audit log for the given Id.
     *
     * @param {number} auditLogId The Id of the audit log to retrieve.
     * @returns {Promise<ClientResponse<AuditLogResponse>>}
     */
    FusionAuthClient.prototype.retrieveAuditLog = function (auditLogId) {
        return this.start()
            .withUri('/api/system/audit-log')
            .withUriSegment(auditLogId)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the connector with the given Id.
     *
     * @param {UUID} connectorId The Id of the connector.
     * @returns {Promise<ClientResponse<ConnectorResponse>>}
     */
    FusionAuthClient.prototype.retrieveConnector = function (connectorId) {
        return this.start()
            .withUri('/api/connector')
            .withUriSegment(connectorId)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves all of the connectors.
     *
     * @returns {Promise<ClientResponse<ConnectorResponse>>}
     */
    FusionAuthClient.prototype.retrieveConnectors = function () {
        return this.start()
            .withUri('/api/connector')
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the Consent for the given Id.
     *
     * @param {UUID} consentId The Id of the consent.
     * @returns {Promise<ClientResponse<ConsentResponse>>}
     */
    FusionAuthClient.prototype.retrieveConsent = function (consentId) {
        return this.start()
            .withUri('/api/consent')
            .withUriSegment(consentId)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves all of the consent.
     *
     * @returns {Promise<ClientResponse<ConsentResponse>>}
     */
    FusionAuthClient.prototype.retrieveConsents = function () {
        return this.start()
            .withUri('/api/consent')
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the daily active user report between the two instants. If you specify an application id, it will only
     * return the daily active counts for that application.
     *
     * @param {UUID} applicationId (Optional) The application id.
     * @param {number} start The start instant as UTC milliseconds since Epoch.
     * @param {number} end The end instant as UTC milliseconds since Epoch.
     * @returns {Promise<ClientResponse<DailyActiveUserReportResponse>>}
     */
    FusionAuthClient.prototype.retrieveDailyActiveReport = function (applicationId, start, end) {
        return this.start()
            .withUri('/api/report/daily-active-user')
            .withParameter('applicationId', applicationId)
            .withParameter('start', start)
            .withParameter('end', end)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the email template for the given Id. If you don't specify the id, this will return all of the email templates.
     *
     * @param {UUID} emailTemplateId (Optional) The Id of the email template.
     * @returns {Promise<ClientResponse<EmailTemplateResponse>>}
     */
    FusionAuthClient.prototype.retrieveEmailTemplate = function (emailTemplateId) {
        return this.start()
            .withUri('/api/email/template')
            .withUriSegment(emailTemplateId)
            .withMethod("GET")
            .go();
    };
    /**
     * Creates a preview of the email template provided in the request. This allows you to preview an email template that
     * hasn't been saved to the database yet. The entire email template does not need to be provided on the request. This
     * will create the preview based on whatever is given.
     *
     * @param {PreviewRequest} request The request that contains the email template and optionally a locale to render it in.
     * @returns {Promise<ClientResponse<PreviewResponse>>}
     */
    FusionAuthClient.prototype.retrieveEmailTemplatePreview = function (request) {
        return this.start()
            .withUri('/api/email/template/preview')
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Retrieves all of the email templates.
     *
     * @returns {Promise<ClientResponse<EmailTemplateResponse>>}
     */
    FusionAuthClient.prototype.retrieveEmailTemplates = function () {
        return this.start()
            .withUri('/api/email/template')
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves a single event log for the given Id.
     *
     * @param {number} eventLogId The Id of the event log to retrieve.
     * @returns {Promise<ClientResponse<EventLogResponse>>}
     */
    FusionAuthClient.prototype.retrieveEventLog = function (eventLogId) {
        return this.start()
            .withUri('/api/system/event-log')
            .withUriSegment(eventLogId)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves all of the families that a user belongs to.
     *
     * @param {UUID} userId The User's id
     * @returns {Promise<ClientResponse<FamilyResponse>>}
     */
    FusionAuthClient.prototype.retrieveFamilies = function (userId) {
        return this.start()
            .withUri('/api/user/family')
            .withParameter('userId', userId)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves all of the members of a family by the unique Family Id.
     *
     * @param {UUID} familyId The unique Id of the Family.
     * @returns {Promise<ClientResponse<FamilyResponse>>}
     */
    FusionAuthClient.prototype.retrieveFamilyMembersByFamilyId = function (familyId) {
        return this.start()
            .withUri('/api/user/family')
            .withUriSegment(familyId)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the form with the given Id.
     *
     * @param {UUID} formId The Id of the form.
     * @returns {Promise<ClientResponse<FormResponse>>}
     */
    FusionAuthClient.prototype.retrieveForm = function (formId) {
        return this.start()
            .withUri('/api/form')
            .withUriSegment(formId)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the form field with the given Id.
     *
     * @param {UUID} fieldId The Id of the form field.
     * @returns {Promise<ClientResponse<FormFieldResponse>>}
     */
    FusionAuthClient.prototype.retrieveFormField = function (fieldId) {
        return this.start()
            .withUri('/api/form/field')
            .withUriSegment(fieldId)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves all of the forms fields
     *
     * @returns {Promise<ClientResponse<FormFieldResponse>>}
     */
    FusionAuthClient.prototype.retrieveFormFields = function () {
        return this.start()
            .withUri('/api/form/field')
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves all of the forms.
     *
     * @returns {Promise<ClientResponse<FormResponse>>}
     */
    FusionAuthClient.prototype.retrieveForms = function () {
        return this.start()
            .withUri('/api/form')
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the group for the given Id.
     *
     * @param {UUID} groupId The Id of the group.
     * @returns {Promise<ClientResponse<GroupResponse>>}
     */
    FusionAuthClient.prototype.retrieveGroup = function (groupId) {
        return this.start()
            .withUri('/api/group')
            .withUriSegment(groupId)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves all of the groups.
     *
     * @returns {Promise<ClientResponse<GroupResponse>>}
     */
    FusionAuthClient.prototype.retrieveGroups = function () {
        return this.start()
            .withUri('/api/group')
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the identity provider for the given id or all of the identity providers if the id is null.
     *
     * @param {UUID} identityProviderId (Optional) The identity provider id.
     * @returns {Promise<ClientResponse<IdentityProviderResponse>>}
     */
    FusionAuthClient.prototype.retrieveIdentityProvider = function (identityProviderId) {
        return this.start()
            .withUri('/api/identity-provider')
            .withUriSegment(identityProviderId)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves all of the identity providers.
     *
     * @returns {Promise<ClientResponse<IdentityProviderResponse>>}
     */
    FusionAuthClient.prototype.retrieveIdentityProviders = function () {
        return this.start()
            .withUri('/api/identity-provider')
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves all of the actions for the user with the given Id that are currently inactive.
     * An inactive action means one that is time based and has been canceled or has expired, or is not time based.
     *
     * @param {UUID} userId The Id of the user to fetch the actions for.
     * @returns {Promise<ClientResponse<ActionResponse>>}
     */
    FusionAuthClient.prototype.retrieveInactiveActions = function (userId) {
        return this.start()
            .withUri('/api/user/action')
            .withParameter('userId', userId)
            .withParameter('active', false)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves all of the applications that are currently inactive.
     *
     * @returns {Promise<ClientResponse<ApplicationResponse>>}
     */
    FusionAuthClient.prototype.retrieveInactiveApplications = function () {
        return this.start()
            .withUri('/api/application')
            .withParameter('inactive', true)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves all of the user actions that are currently inactive.
     *
     * @returns {Promise<ClientResponse<UserActionResponse>>}
     */
    FusionAuthClient.prototype.retrieveInactiveUserActions = function () {
        return this.start()
            .withUri('/api/user-action')
            .withParameter('inactive', true)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the available integrations.
     *
     * @returns {Promise<ClientResponse<IntegrationResponse>>}
     */
    FusionAuthClient.prototype.retrieveIntegration = function () {
        return this.start()
            .withUri('/api/integration')
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the Public Key configured for verifying JSON Web Tokens (JWT) by the key Id (kid).
     *
     * @param {string} keyId The Id of the public key (kid).
     * @returns {Promise<ClientResponse<PublicKeyResponse>>}
     */
    FusionAuthClient.prototype.retrieveJWTPublicKey = function (keyId) {
        return this.startAnonymous()
            .withUri('/api/jwt/public-key')
            .withParameter('kid', keyId)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the Public Key configured for verifying the JSON Web Tokens (JWT) issued by the Login API by the Application Id.
     *
     * @param {string} applicationId The Id of the Application for which this key is used.
     * @returns {Promise<ClientResponse<PublicKeyResponse>>}
     */
    FusionAuthClient.prototype.retrieveJWTPublicKeyByApplicationId = function (applicationId) {
        return this.startAnonymous()
            .withUri('/api/jwt/public-key')
            .withParameter('applicationId', applicationId)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves all Public Keys configured for verifying JSON Web Tokens (JWT).
     *
     * @returns {Promise<ClientResponse<PublicKeyResponse>>}
     */
    FusionAuthClient.prototype.retrieveJWTPublicKeys = function () {
        return this.startAnonymous()
            .withUri('/api/jwt/public-key')
            .withMethod("GET")
            .go();
    };
    /**
     * Returns public keys used by FusionAuth to cryptographically verify JWTs using the JSON Web Key format.
     *
     * @returns {Promise<ClientResponse<JWKSResponse>>}
     */
    FusionAuthClient.prototype.retrieveJsonWebKeySet = function () {
        return this.startAnonymous()
            .withUri('/.well-known/jwks.json')
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the key for the given Id.
     *
     * @param {UUID} keyId The Id of the key.
     * @returns {Promise<ClientResponse<KeyResponse>>}
     */
    FusionAuthClient.prototype.retrieveKey = function (keyId) {
        return this.start()
            .withUri('/api/key')
            .withUriSegment(keyId)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves all of the keys.
     *
     * @returns {Promise<ClientResponse<KeyResponse>>}
     */
    FusionAuthClient.prototype.retrieveKeys = function () {
        return this.start()
            .withUri('/api/key')
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the lambda for the given Id.
     *
     * @param {UUID} lambdaId The Id of the lambda.
     * @returns {Promise<ClientResponse<LambdaResponse>>}
     */
    FusionAuthClient.prototype.retrieveLambda = function (lambdaId) {
        return this.start()
            .withUri('/api/lambda')
            .withUriSegment(lambdaId)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves all of the lambdas.
     *
     * @returns {Promise<ClientResponse<LambdaResponse>>}
     */
    FusionAuthClient.prototype.retrieveLambdas = function () {
        return this.start()
            .withUri('/api/lambda')
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves all of the lambdas for the provided type.
     *
     * @param {LambdaType} type The type of the lambda to return.
     * @returns {Promise<ClientResponse<LambdaResponse>>}
     */
    FusionAuthClient.prototype.retrieveLambdasByType = function (type) {
        return this.start()
            .withUri('/api/lambda')
            .withParameter('type', type)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the login report between the two instants. If you specify an application id, it will only return the
     * login counts for that application.
     *
     * @param {UUID} applicationId (Optional) The application id.
     * @param {number} start The start instant as UTC milliseconds since Epoch.
     * @param {number} end The end instant as UTC milliseconds since Epoch.
     * @returns {Promise<ClientResponse<LoginReportResponse>>}
     */
    FusionAuthClient.prototype.retrieveLoginReport = function (applicationId, start, end) {
        return this.start()
            .withUri('/api/report/login')
            .withParameter('applicationId', applicationId)
            .withParameter('start', start)
            .withParameter('end', end)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the monthly active user report between the two instants. If you specify an application id, it will only
     * return the monthly active counts for that application.
     *
     * @param {UUID} applicationId (Optional) The application id.
     * @param {number} start The start instant as UTC milliseconds since Epoch.
     * @param {number} end The end instant as UTC milliseconds since Epoch.
     * @returns {Promise<ClientResponse<MonthlyActiveUserReportResponse>>}
     */
    FusionAuthClient.prototype.retrieveMonthlyActiveReport = function (applicationId, start, end) {
        return this.start()
            .withUri('/api/report/monthly-active-user')
            .withParameter('applicationId', applicationId)
            .withParameter('start', start)
            .withParameter('end', end)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the Oauth2 configuration for the application for the given Application Id.
     *
     * @param {UUID} applicationId The Id of the Application to retrieve OAuth configuration.
     * @returns {Promise<ClientResponse<OAuthConfigurationResponse>>}
     */
    FusionAuthClient.prototype.retrieveOauthConfiguration = function (applicationId) {
        return this.start()
            .withUri('/api/application')
            .withUriSegment(applicationId)
            .withUriSegment("oauth-configuration")
            .withMethod("GET")
            .go();
    };
    /**
     * Returns the well known OpenID Configuration JSON document
     *
     * @returns {Promise<ClientResponse<OpenIdConfiguration>>}
     */
    FusionAuthClient.prototype.retrieveOpenIdConfiguration = function () {
        return this.startAnonymous()
            .withUri('/.well-known/openid-configuration')
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the password validation rules for a specific tenant. This method requires a tenantId to be provided
     * through the use of a Tenant scoped API key or an HTTP header X-FusionAuth-TenantId to specify the Tenant Id.
     *
     * This API does not require an API key.
     *
     * @returns {Promise<ClientResponse<PasswordValidationRulesResponse>>}
     */
    FusionAuthClient.prototype.retrievePasswordValidationRules = function () {
        return this.startAnonymous()
            .withUri('/api/tenant/password-validation-rules')
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the password validation rules for a specific tenant.
     *
     * This API does not require an API key.
     *
     * @param {UUID} tenantId The Id of the tenant.
     * @returns {Promise<ClientResponse<PasswordValidationRulesResponse>>}
     */
    FusionAuthClient.prototype.retrievePasswordValidationRulesWithTenantId = function (tenantId) {
        return this.startAnonymous()
            .withUri('/api/tenant/password-validation-rules')
            .withUriSegment(tenantId)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves all of the children for the given parent email address.
     *
     * @param {string} parentEmail The email of the parent.
     * @returns {Promise<ClientResponse<PendingResponse>>}
     */
    FusionAuthClient.prototype.retrievePendingChildren = function (parentEmail) {
        return this.start()
            .withUri('/api/user/family/pending')
            .withParameter('parentEmail', parentEmail)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the last number of login records.
     *
     * @param {number} offset The initial record. e.g. 0 is the last login, 100 will be the 100th most recent login.
     * @param {number} limit (Optional, defaults to 10) The number of records to retrieve.
     * @returns {Promise<ClientResponse<RecentLoginResponse>>}
     */
    FusionAuthClient.prototype.retrieveRecentLogins = function (offset, limit) {
        return this.start()
            .withUri('/api/user/recent-login')
            .withParameter('offset', offset)
            .withParameter('limit', limit)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the refresh tokens that belong to the user with the given Id.
     *
     * @param {UUID} userId The Id of the user.
     * @returns {Promise<ClientResponse<RefreshResponse>>}
     */
    FusionAuthClient.prototype.retrieveRefreshTokens = function (userId) {
        return this.start()
            .withUri('/api/jwt/refresh')
            .withParameter('userId', userId)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the user registration for the user with the given id and the given application id.
     *
     * @param {UUID} userId The Id of the user.
     * @param {UUID} applicationId The Id of the application.
     * @returns {Promise<ClientResponse<RegistrationResponse>>}
     */
    FusionAuthClient.prototype.retrieveRegistration = function (userId, applicationId) {
        return this.start()
            .withUri('/api/user/registration')
            .withUriSegment(userId)
            .withUriSegment(applicationId)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the registration report between the two instants. If you specify an application id, it will only return
     * the registration counts for that application.
     *
     * @param {UUID} applicationId (Optional) The application id.
     * @param {number} start The start instant as UTC milliseconds since Epoch.
     * @param {number} end The end instant as UTC milliseconds since Epoch.
     * @returns {Promise<ClientResponse<RegistrationReportResponse>>}
     */
    FusionAuthClient.prototype.retrieveRegistrationReport = function (applicationId, start, end) {
        return this.start()
            .withUri('/api/report/registration')
            .withParameter('applicationId', applicationId)
            .withParameter('start', start)
            .withParameter('end', end)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the system configuration.
     *
     * @returns {Promise<ClientResponse<SystemConfigurationResponse>>}
     */
    FusionAuthClient.prototype.retrieveSystemConfiguration = function () {
        return this.start()
            .withUri('/api/system-configuration')
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the tenant for the given Id.
     *
     * @param {UUID} tenantId The Id of the tenant.
     * @returns {Promise<ClientResponse<TenantResponse>>}
     */
    FusionAuthClient.prototype.retrieveTenant = function (tenantId) {
        return this.start()
            .withUri('/api/tenant')
            .withUriSegment(tenantId)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves all of the tenants.
     *
     * @returns {Promise<ClientResponse<TenantResponse>>}
     */
    FusionAuthClient.prototype.retrieveTenants = function () {
        return this.start()
            .withUri('/api/tenant')
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the theme for the given Id.
     *
     * @param {UUID} themeId The Id of the theme.
     * @returns {Promise<ClientResponse<ThemeResponse>>}
     */
    FusionAuthClient.prototype.retrieveTheme = function (themeId) {
        return this.start()
            .withUri('/api/theme')
            .withUriSegment(themeId)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves all of the themes.
     *
     * @returns {Promise<ClientResponse<ThemeResponse>>}
     */
    FusionAuthClient.prototype.retrieveThemes = function () {
        return this.start()
            .withUri('/api/theme')
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the totals report. This contains all of the total counts for each application and the global registration
     * count.
     *
     * @returns {Promise<ClientResponse<TotalsReportResponse>>}
     */
    FusionAuthClient.prototype.retrieveTotalReport = function () {
        return this.start()
            .withUri('/api/report/totals')
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the user for the given Id.
     *
     * @param {UUID} userId The Id of the user.
     * @returns {Promise<ClientResponse<UserResponse>>}
     */
    FusionAuthClient.prototype.retrieveUser = function (userId) {
        return this.start()
            .withUri('/api/user')
            .withUriSegment(userId)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the user action for the given Id. If you pass in null for the id, this will return all of the user
     * actions.
     *
     * @param {UUID} userActionId (Optional) The Id of the user action.
     * @returns {Promise<ClientResponse<UserActionResponse>>}
     */
    FusionAuthClient.prototype.retrieveUserAction = function (userActionId) {
        return this.start()
            .withUri('/api/user-action')
            .withUriSegment(userActionId)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the user action reason for the given Id. If you pass in null for the id, this will return all of the user
     * action reasons.
     *
     * @param {UUID} userActionReasonId (Optional) The Id of the user action reason.
     * @returns {Promise<ClientResponse<UserActionReasonResponse>>}
     */
    FusionAuthClient.prototype.retrieveUserActionReason = function (userActionReasonId) {
        return this.start()
            .withUri('/api/user-action-reason')
            .withUriSegment(userActionReasonId)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves all the user action reasons.
     *
     * @returns {Promise<ClientResponse<UserActionReasonResponse>>}
     */
    FusionAuthClient.prototype.retrieveUserActionReasons = function () {
        return this.start()
            .withUri('/api/user-action-reason')
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves all of the user actions.
     *
     * @returns {Promise<ClientResponse<UserActionResponse>>}
     */
    FusionAuthClient.prototype.retrieveUserActions = function () {
        return this.start()
            .withUri('/api/user-action')
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the user by a change password Id. The intended use of this API is to retrieve a user after the forgot
     * password workflow has been initiated and you may not know the user's email or username.
     *
     * @param {string} changePasswordId The unique change password Id that was sent via email or returned by the Forgot Password API.
     * @returns {Promise<ClientResponse<UserResponse>>}
     */
    FusionAuthClient.prototype.retrieveUserByChangePasswordId = function (changePasswordId) {
        return this.start()
            .withUri('/api/user')
            .withParameter('changePasswordId', changePasswordId)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the user for the given email.
     *
     * @param {string} email The email of the user.
     * @returns {Promise<ClientResponse<UserResponse>>}
     */
    FusionAuthClient.prototype.retrieveUserByEmail = function (email) {
        return this.start()
            .withUri('/api/user')
            .withParameter('email', email)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the user for the loginId. The loginId can be either the username or the email.
     *
     * @param {string} loginId The email or username of the user.
     * @returns {Promise<ClientResponse<UserResponse>>}
     */
    FusionAuthClient.prototype.retrieveUserByLoginId = function (loginId) {
        return this.start()
            .withUri('/api/user')
            .withParameter('loginId', loginId)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the user for the given username.
     *
     * @param {string} username The username of the user.
     * @returns {Promise<ClientResponse<UserResponse>>}
     */
    FusionAuthClient.prototype.retrieveUserByUsername = function (username) {
        return this.start()
            .withUri('/api/user')
            .withParameter('username', username)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the user by a verificationId. The intended use of this API is to retrieve a user after the forgot
     * password workflow has been initiated and you may not know the user's email or username.
     *
     * @param {string} verificationId The unique verification Id that has been set on the user object.
     * @returns {Promise<ClientResponse<UserResponse>>}
     */
    FusionAuthClient.prototype.retrieveUserByVerificationId = function (verificationId) {
        return this.start()
            .withUri('/api/user')
            .withParameter('verificationId', verificationId)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves all of the comments for the user with the given Id.
     *
     * @param {UUID} userId The Id of the user.
     * @returns {Promise<ClientResponse<UserCommentResponse>>}
     */
    FusionAuthClient.prototype.retrieveUserComments = function (userId) {
        return this.start()
            .withUri('/api/user/comment')
            .withUriSegment(userId)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieve a single User consent by Id.
     *
     * @param {UUID} userConsentId The User consent Id
     * @returns {Promise<ClientResponse<UserConsentResponse>>}
     */
    FusionAuthClient.prototype.retrieveUserConsent = function (userConsentId) {
        return this.start()
            .withUri('/api/user/consent')
            .withUriSegment(userConsentId)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves all of the consents for a User.
     *
     * @param {UUID} userId The User's Id
     * @returns {Promise<ClientResponse<UserConsentResponse>>}
     */
    FusionAuthClient.prototype.retrieveUserConsents = function (userId) {
        return this.start()
            .withUri('/api/user/consent')
            .withParameter('userId', userId)
            .withMethod("GET")
            .go();
    };
    /**
     * Call the UserInfo endpoint to retrieve User Claims from the access token issued by FusionAuth.
     *
     * @param {string} encodedJWT The encoded JWT (access token).
     * @returns {Promise<ClientResponse<UserResponse>>}
     */
    FusionAuthClient.prototype.retrieveUserInfoFromAccessToken = function (encodedJWT) {
        return this.startAnonymous()
            .withUri('/oauth2/userinfo')
            .withAuthorization('Bearer ' + encodedJWT)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the login report between the two instants for a particular user by Id. If you specify an application id, it will only return the
     * login counts for that application.
     *
     * @param {UUID} applicationId (Optional) The application id.
     * @param {UUID} userId The userId id.
     * @param {number} start The start instant as UTC milliseconds since Epoch.
     * @param {number} end The end instant as UTC milliseconds since Epoch.
     * @returns {Promise<ClientResponse<LoginReportResponse>>}
     */
    FusionAuthClient.prototype.retrieveUserLoginReport = function (applicationId, userId, start, end) {
        return this.start()
            .withUri('/api/report/login')
            .withParameter('applicationId', applicationId)
            .withParameter('userId', userId)
            .withParameter('start', start)
            .withParameter('end', end)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the login report between the two instants for a particular user by login Id. If you specify an application id, it will only return the
     * login counts for that application.
     *
     * @param {UUID} applicationId (Optional) The application id.
     * @param {string} loginId The userId id.
     * @param {number} start The start instant as UTC milliseconds since Epoch.
     * @param {number} end The end instant as UTC milliseconds since Epoch.
     * @returns {Promise<ClientResponse<LoginReportResponse>>}
     */
    FusionAuthClient.prototype.retrieveUserLoginReportByLoginId = function (applicationId, loginId, start, end) {
        return this.start()
            .withUri('/api/report/login')
            .withParameter('applicationId', applicationId)
            .withParameter('loginId', loginId)
            .withParameter('start', start)
            .withParameter('end', end)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the last number of login records for a user.
     *
     * @param {UUID} userId The Id of the user.
     * @param {number} offset The initial record. e.g. 0 is the last login, 100 will be the 100th most recent login.
     * @param {number} limit (Optional, defaults to 10) The number of records to retrieve.
     * @returns {Promise<ClientResponse<RecentLoginResponse>>}
     */
    FusionAuthClient.prototype.retrieveUserRecentLogins = function (userId, offset, limit) {
        return this.start()
            .withUri('/api/user/recent-login')
            .withParameter('userId', userId)
            .withParameter('offset', offset)
            .withParameter('limit', limit)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the user for the given Id. This method does not use an API key, instead it uses a JSON Web Token (JWT) for authentication.
     *
     * @param {string} encodedJWT The encoded JWT (access token).
     * @returns {Promise<ClientResponse<UserResponse>>}
     */
    FusionAuthClient.prototype.retrieveUserUsingJWT = function (encodedJWT) {
        return this.startAnonymous()
            .withUri('/api/user')
            .withAuthorization('Bearer ' + encodedJWT)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the webhook for the given Id. If you pass in null for the id, this will return all the webhooks.
     *
     * @param {UUID} webhookId (Optional) The Id of the webhook.
     * @returns {Promise<ClientResponse<WebhookResponse>>}
     */
    FusionAuthClient.prototype.retrieveWebhook = function (webhookId) {
        return this.start()
            .withUri('/api/webhook')
            .withUriSegment(webhookId)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves all the webhooks.
     *
     * @returns {Promise<ClientResponse<WebhookResponse>>}
     */
    FusionAuthClient.prototype.retrieveWebhooks = function () {
        return this.start()
            .withUri('/api/webhook')
            .withMethod("GET")
            .go();
    };
    /**
     * Revokes a single refresh token, all tokens for a user or all tokens for an application. If you provide a user id
     * and an application id, this will delete all the refresh tokens for that user for that application.
     *
     * @param {string} token (Optional) The refresh token to delete.
     * @param {UUID} userId (Optional) The user id whose tokens to delete.
     * @param {UUID} applicationId (Optional) The application id of the tokens to delete.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.revokeRefreshToken = function (token, userId, applicationId) {
        return this.start()
            .withUri('/api/jwt/refresh')
            .withParameter('token', token)
            .withParameter('userId', userId)
            .withParameter('applicationId', applicationId)
            .withMethod("DELETE")
            .go();
    };
    /**
     * Revokes a single User consent by Id.
     *
     * @param {UUID} userConsentId The User Consent Id
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.revokeUserConsent = function (userConsentId) {
        return this.start()
            .withUri('/api/user/consent')
            .withUriSegment(userConsentId)
            .withMethod("DELETE")
            .go();
    };
    /**
     * Searches the audit logs with the specified criteria and pagination.
     *
     * @param {AuditLogSearchRequest} request The search criteria and pagination information.
     * @returns {Promise<ClientResponse<AuditLogSearchResponse>>}
     */
    FusionAuthClient.prototype.searchAuditLogs = function (request) {
        return this.start()
            .withUri('/api/system/audit-log/search')
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Searches the event logs with the specified criteria and pagination.
     *
     * @param {EventLogSearchRequest} request The search criteria and pagination information.
     * @returns {Promise<ClientResponse<EventLogSearchResponse>>}
     */
    FusionAuthClient.prototype.searchEventLogs = function (request) {
        return this.start()
            .withUri('/api/system/event-log/search')
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Searches the login records with the specified criteria and pagination.
     *
     * @param {LoginRecordSearchRequest} request The search criteria and pagination information.
     * @returns {Promise<ClientResponse<LoginRecordSearchResponse>>}
     */
    FusionAuthClient.prototype.searchLoginRecords = function (request) {
        return this.start()
            .withUri('/api/system/login-record/search')
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Retrieves the users for the given ids. If any id is invalid, it is ignored.
     *
     * @param {Array<string>} ids The user ids to search for.
     * @returns {Promise<ClientResponse<SearchResponse>>}
     *
     * @deprecated This method has been renamed to searchUsersByIds, use that method instead.
     */
    FusionAuthClient.prototype.searchUsers = function (ids) {
        return this.start()
            .withUri('/api/user/search')
            .withParameter('ids', ids)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the users for the given ids. If any id is invalid, it is ignored.
     *
     * @param {Array<string>} ids The user ids to search for.
     * @returns {Promise<ClientResponse<SearchResponse>>}
     */
    FusionAuthClient.prototype.searchUsersByIds = function (ids) {
        return this.start()
            .withUri('/api/user/search')
            .withParameter('ids', ids)
            .withMethod("GET")
            .go();
    };
    /**
     * Retrieves the users for the given search criteria and pagination.
     *
     * @param {SearchRequest} request The search criteria and pagination constraints. Fields used: ids, query, queryString, numberOfResults, orderBy, startRow,
     *    and sortFields.
     * @returns {Promise<ClientResponse<SearchResponse>>}
     */
    FusionAuthClient.prototype.searchUsersByQuery = function (request) {
        return this.start()
            .withUri('/api/user/search')
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Retrieves the users for the given search criteria and pagination.
     *
     * @param {SearchRequest} request The search criteria and pagination constraints. Fields used: ids, query, queryString, numberOfResults, orderBy, startRow,
     *    and sortFields.
     * @returns {Promise<ClientResponse<SearchResponse>>}
     *
     * @deprecated This method has been renamed to searchUsersByQuery, use that method instead.
     */
    FusionAuthClient.prototype.searchUsersByQueryString = function (request) {
        return this.start()
            .withUri('/api/user/search')
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Send an email using an email template id. You can optionally provide <code>requestData</code> to access key value
     * pairs in the email template.
     *
     * @param {UUID} emailTemplateId The id for the template.
     * @param {SendRequest} request The send email request that contains all of the information used to send the email.
     * @returns {Promise<ClientResponse<SendResponse>>}
     */
    FusionAuthClient.prototype.sendEmail = function (emailTemplateId, request) {
        return this.start()
            .withUri('/api/email/send')
            .withUriSegment(emailTemplateId)
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Sends out an email to a parent that they need to register and create a family or need to log in and add a child to their existing family.
     *
     * @param {FamilyEmailRequest} request The request object that contains the parent email.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.sendFamilyRequestEmail = function (request) {
        return this.start()
            .withUri('/api/user/family/request')
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Send a passwordless authentication code in an email to complete login.
     *
     * @param {PasswordlessSendRequest} request The passwordless send request that contains all of the information used to send an email containing a code.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.sendPasswordlessCode = function (request) {
        return this.startAnonymous()
            .withUri('/api/passwordless/send')
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Send a Two Factor authentication code to assist in setting up Two Factor authentication or disabling.
     *
     * @param {TwoFactorSendRequest} request The request object that contains all of the information used to send the code.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.sendTwoFactorCode = function (request) {
        return this.start()
            .withUri('/api/two-factor/send')
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Send a Two Factor authentication code to allow the completion of Two Factor authentication.
     *
     * @param {string} twoFactorId The Id returned by the Login API necessary to complete Two Factor authentication.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.sendTwoFactorCodeForLogin = function (twoFactorId) {
        return this.startAnonymous()
            .withHeader('Content-Type', 'text/plain')
            .withUri('/api/two-factor/send')
            .withUriSegment(twoFactorId)
            .withMethod("POST")
            .go();
    };
    /**
     * Begins a login request for a 3rd party login that requires user interaction such as HYPR.
     *
     * @param {IdentityProviderStartLoginRequest} request The third-party login request that contains information from the third-party login
     *    providers that FusionAuth uses to reconcile the user's account.
     * @returns {Promise<ClientResponse<IdentityProviderStartLoginResponse>>}
     */
    FusionAuthClient.prototype.startIdentityProviderLogin = function (request) {
        return this.start()
            .withUri('/api/identity-provider/start')
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Start a passwordless login request by generating a passwordless code. This code can be sent to the User using the Send
     * Passwordless Code API or using a mechanism outside of FusionAuth. The passwordless login is completed by using the Passwordless Login API with this code.
     *
     * @param {PasswordlessStartRequest} request The passwordless start request that contains all of the information used to begin the passwordless login request.
     * @returns {Promise<ClientResponse<PasswordlessStartResponse>>}
     */
    FusionAuthClient.prototype.startPasswordlessLogin = function (request) {
        return this.start()
            .withUri('/api/passwordless/start')
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Complete login using a 2FA challenge
     *
     * @param {TwoFactorLoginRequest} request The login request that contains the user credentials used to log them in.
     * @returns {Promise<ClientResponse<LoginResponse>>}
     */
    FusionAuthClient.prototype.twoFactorLogin = function (request) {
        return this.startAnonymous()
            .withUri('/api/two-factor/login')
            .withJSONBody(request)
            .withMethod("POST")
            .go();
    };
    /**
     * Updates the application with the given Id.
     *
     * @param {UUID} applicationId The Id of the application to update.
     * @param {ApplicationRequest} request The request that contains all of the new application information.
     * @returns {Promise<ClientResponse<ApplicationResponse>>}
     */
    FusionAuthClient.prototype.updateApplication = function (applicationId, request) {
        return this.start()
            .withUri('/api/application')
            .withUriSegment(applicationId)
            .withJSONBody(request)
            .withMethod("PUT")
            .go();
    };
    /**
     * Updates the application role with the given id for the application.
     *
     * @param {UUID} applicationId The Id of the application that the role belongs to.
     * @param {UUID} roleId The Id of the role to update.
     * @param {ApplicationRequest} request The request that contains all of the new role information.
     * @returns {Promise<ClientResponse<ApplicationResponse>>}
     */
    FusionAuthClient.prototype.updateApplicationRole = function (applicationId, roleId, request) {
        return this.start()
            .withUri('/api/application')
            .withUriSegment(applicationId)
            .withUriSegment("role")
            .withUriSegment(roleId)
            .withJSONBody(request)
            .withMethod("PUT")
            .go();
    };
    /**
     * Updates the connector with the given Id.
     *
     * @param {UUID} connectorId The Id of the connector to update.
     * @param {ConnectorRequest} request The request object that contains all of the new connector information.
     * @returns {Promise<ClientResponse<ConnectorResponse>>}
     */
    FusionAuthClient.prototype.updateConnector = function (connectorId, request) {
        return this.start()
            .withUri('/api/connector')
            .withUriSegment(connectorId)
            .withJSONBody(request)
            .withMethod("PUT")
            .go();
    };
    /**
     * Updates the consent with the given Id.
     *
     * @param {UUID} consentId The Id of the consent to update.
     * @param {ConsentRequest} request The request that contains all of the new consent information.
     * @returns {Promise<ClientResponse<ConsentResponse>>}
     */
    FusionAuthClient.prototype.updateConsent = function (consentId, request) {
        return this.start()
            .withUri('/api/consent')
            .withUriSegment(consentId)
            .withJSONBody(request)
            .withMethod("PUT")
            .go();
    };
    /**
     * Updates the email template with the given Id.
     *
     * @param {UUID} emailTemplateId The Id of the email template to update.
     * @param {EmailTemplateRequest} request The request that contains all of the new email template information.
     * @returns {Promise<ClientResponse<EmailTemplateResponse>>}
     */
    FusionAuthClient.prototype.updateEmailTemplate = function (emailTemplateId, request) {
        return this.start()
            .withUri('/api/email/template')
            .withUriSegment(emailTemplateId)
            .withJSONBody(request)
            .withMethod("PUT")
            .go();
    };
    /**
     * Updates the form with the given Id.
     *
     * @param {UUID} formId The Id of the form to update.
     * @param {FormRequest} request The request object that contains all of the new form information.
     * @returns {Promise<ClientResponse<FormResponse>>}
     */
    FusionAuthClient.prototype.updateForm = function (formId, request) {
        return this.start()
            .withUri('/api/form')
            .withUriSegment(formId)
            .withJSONBody(request)
            .withMethod("PUT")
            .go();
    };
    /**
     * Updates the form field with the given Id.
     *
     * @param {UUID} fieldId The Id of the form field to update.
     * @param {FormFieldRequest} request The request object that contains all of the new form field information.
     * @returns {Promise<ClientResponse<FormFieldResponse>>}
     */
    FusionAuthClient.prototype.updateFormField = function (fieldId, request) {
        return this.start()
            .withUri('/api/form/field')
            .withUriSegment(fieldId)
            .withJSONBody(request)
            .withMethod("PUT")
            .go();
    };
    /**
     * Updates the group with the given Id.
     *
     * @param {UUID} groupId The Id of the group to update.
     * @param {GroupRequest} request The request that contains all of the new group information.
     * @returns {Promise<ClientResponse<GroupResponse>>}
     */
    FusionAuthClient.prototype.updateGroup = function (groupId, request) {
        return this.start()
            .withUri('/api/group')
            .withUriSegment(groupId)
            .withJSONBody(request)
            .withMethod("PUT")
            .go();
    };
    /**
     * Updates the identity provider with the given Id.
     *
     * @param {UUID} identityProviderId The Id of the identity provider to update.
     * @param {IdentityProviderRequest} request The request object that contains the updated identity provider.
     * @returns {Promise<ClientResponse<IdentityProviderResponse>>}
     */
    FusionAuthClient.prototype.updateIdentityProvider = function (identityProviderId, request) {
        return this.start()
            .withUri('/api/identity-provider')
            .withUriSegment(identityProviderId)
            .withJSONBody(request)
            .withMethod("PUT")
            .go();
    };
    /**
     * Updates the available integrations.
     *
     * @param {IntegrationRequest} request The request that contains all of the new integration information.
     * @returns {Promise<ClientResponse<IntegrationResponse>>}
     */
    FusionAuthClient.prototype.updateIntegrations = function (request) {
        return this.start()
            .withUri('/api/integration')
            .withJSONBody(request)
            .withMethod("PUT")
            .go();
    };
    /**
     * Updates the key with the given Id.
     *
     * @param {UUID} keyId The Id of the key to update.
     * @param {KeyRequest} request The request that contains all of the new key information.
     * @returns {Promise<ClientResponse<KeyResponse>>}
     */
    FusionAuthClient.prototype.updateKey = function (keyId, request) {
        return this.start()
            .withUri('/api/key')
            .withUriSegment(keyId)
            .withJSONBody(request)
            .withMethod("PUT")
            .go();
    };
    /**
     * Updates the lambda with the given Id.
     *
     * @param {UUID} lambdaId The Id of the lambda to update.
     * @param {LambdaRequest} request The request that contains all of the new lambda information.
     * @returns {Promise<ClientResponse<LambdaResponse>>}
     */
    FusionAuthClient.prototype.updateLambda = function (lambdaId, request) {
        return this.start()
            .withUri('/api/lambda')
            .withUriSegment(lambdaId)
            .withJSONBody(request)
            .withMethod("PUT")
            .go();
    };
    /**
     * Updates the registration for the user with the given id and the application defined in the request.
     *
     * @param {UUID} userId The Id of the user whose registration is going to be updated.
     * @param {RegistrationRequest} request The request that contains all of the new registration information.
     * @returns {Promise<ClientResponse<RegistrationResponse>>}
     */
    FusionAuthClient.prototype.updateRegistration = function (userId, request) {
        return this.start()
            .withUri('/api/user/registration')
            .withUriSegment(userId)
            .withJSONBody(request)
            .withMethod("PUT")
            .go();
    };
    /**
     * Updates the system configuration.
     *
     * @param {SystemConfigurationRequest} request The request that contains all of the new system configuration information.
     * @returns {Promise<ClientResponse<SystemConfigurationResponse>>}
     */
    FusionAuthClient.prototype.updateSystemConfiguration = function (request) {
        return this.start()
            .withUri('/api/system-configuration')
            .withJSONBody(request)
            .withMethod("PUT")
            .go();
    };
    /**
     * Updates the tenant with the given Id.
     *
     * @param {UUID} tenantId The Id of the tenant to update.
     * @param {TenantRequest} request The request that contains all of the new tenant information.
     * @returns {Promise<ClientResponse<TenantResponse>>}
     */
    FusionAuthClient.prototype.updateTenant = function (tenantId, request) {
        return this.start()
            .withUri('/api/tenant')
            .withUriSegment(tenantId)
            .withJSONBody(request)
            .withMethod("PUT")
            .go();
    };
    /**
     * Updates the theme with the given Id.
     *
     * @param {UUID} themeId The Id of the theme to update.
     * @param {ThemeRequest} request The request that contains all of the new theme information.
     * @returns {Promise<ClientResponse<ThemeResponse>>}
     */
    FusionAuthClient.prototype.updateTheme = function (themeId, request) {
        return this.start()
            .withUri('/api/theme')
            .withUriSegment(themeId)
            .withJSONBody(request)
            .withMethod("PUT")
            .go();
    };
    /**
     * Updates the user with the given Id.
     *
     * @param {UUID} userId The Id of the user to update.
     * @param {UserRequest} request The request that contains all of the new user information.
     * @returns {Promise<ClientResponse<UserResponse>>}
     */
    FusionAuthClient.prototype.updateUser = function (userId, request) {
        return this.start()
            .withUri('/api/user')
            .withUriSegment(userId)
            .withJSONBody(request)
            .withMethod("PUT")
            .go();
    };
    /**
     * Updates the user action with the given Id.
     *
     * @param {UUID} userActionId The Id of the user action to update.
     * @param {UserActionRequest} request The request that contains all of the new user action information.
     * @returns {Promise<ClientResponse<UserActionResponse>>}
     */
    FusionAuthClient.prototype.updateUserAction = function (userActionId, request) {
        return this.start()
            .withUri('/api/user-action')
            .withUriSegment(userActionId)
            .withJSONBody(request)
            .withMethod("PUT")
            .go();
    };
    /**
     * Updates the user action reason with the given Id.
     *
     * @param {UUID} userActionReasonId The Id of the user action reason to update.
     * @param {UserActionReasonRequest} request The request that contains all of the new user action reason information.
     * @returns {Promise<ClientResponse<UserActionReasonResponse>>}
     */
    FusionAuthClient.prototype.updateUserActionReason = function (userActionReasonId, request) {
        return this.start()
            .withUri('/api/user-action-reason')
            .withUriSegment(userActionReasonId)
            .withJSONBody(request)
            .withMethod("PUT")
            .go();
    };
    /**
     * Updates a single User consent by Id.
     *
     * @param {UUID} userConsentId The User Consent Id
     * @param {UserConsentRequest} request The request that contains the user consent information.
     * @returns {Promise<ClientResponse<UserConsentResponse>>}
     */
    FusionAuthClient.prototype.updateUserConsent = function (userConsentId, request) {
        return this.start()
            .withUri('/api/user/consent')
            .withUriSegment(userConsentId)
            .withJSONBody(request)
            .withMethod("PUT")
            .go();
    };
    /**
     * Updates the webhook with the given Id.
     *
     * @param {UUID} webhookId The Id of the webhook to update.
     * @param {WebhookRequest} request The request that contains all of the new webhook information.
     * @returns {Promise<ClientResponse<WebhookResponse>>}
     */
    FusionAuthClient.prototype.updateWebhook = function (webhookId, request) {
        return this.start()
            .withUri('/api/webhook')
            .withUriSegment(webhookId)
            .withJSONBody(request)
            .withMethod("PUT")
            .go();
    };
    /**
     * Validates the end-user provided user_code from the user-interaction of the Device Authorization Grant.
     * If you build your own activation form you should validate the user provided code prior to beginning the Authorization grant.
     *
     * @param {string} user_code The end-user verification code.
     * @param {string} client_id The client id.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.validateDevice = function (user_code, client_id) {
        return this.startAnonymous()
            .withUri('/oauth2/device/validate')
            .withParameter('user_code', user_code)
            .withParameter('client_id', client_id)
            .withMethod("GET")
            .go();
    };
    /**
     * Validates the provided JWT (encoded JWT string) to ensure the token is valid. A valid access token is properly
     * signed and not expired.
     * <p>
     * This API may be used to verify the JWT as well as decode the encoded JWT into human readable identity claims.
     *
     * @param {string} encodedJWT The encoded JWT (access token).
     * @returns {Promise<ClientResponse<ValidateResponse>>}
     */
    FusionAuthClient.prototype.validateJWT = function (encodedJWT) {
        return this.startAnonymous()
            .withUri('/api/jwt/validate')
            .withAuthorization('Bearer ' + encodedJWT)
            .withMethod("GET")
            .go();
    };
    /**
     * Confirms a email verification. The Id given is usually from an email sent to the user.
     *
     * @param {string} verificationId The email verification id sent to the user.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.verifyEmail = function (verificationId) {
        return this.startAnonymous()
            .withHeader('Content-Type', 'text/plain')
            .withUri('/api/user/verify-email')
            .withUriSegment(verificationId)
            .withMethod("POST")
            .go();
    };
    /**
     * Confirms an application registration. The Id given is usually from an email sent to the user.
     *
     * @param {string} verificationId The registration verification Id sent to the user.
     * @returns {Promise<ClientResponse<void>>}
     */
    FusionAuthClient.prototype.verifyRegistration = function (verificationId) {
        return this.startAnonymous()
            .withHeader('Content-Type', 'text/plain')
            .withUri('/api/user/verify-registration')
            .withUriSegment(verificationId)
            .withMethod("POST")
            .go();
    };
    /* ===================================================================================================================
     * Private methods
     * ===================================================================================================================*/
    /**
     * creates a rest client
     *
     * @returns The RESTClient that will be used to call.
     * @private
     */
    FusionAuthClient.prototype.start = function () {
        return this.startAnonymous()
            .withAuthorization(this.apiKey);
    };
    FusionAuthClient.prototype.startAnonymous = function () {
        var client = this.clientBuilder.build(this.host);
        if (this.tenantId != null) {
            client.withHeader('X-FusionAuth-TenantId', this.tenantId);
        }
        if (this.credentials != null) {
            client.withCredentials(this.credentials);
        }
        return client;
    };
    return FusionAuthClient;
}());
exports.FusionAuthClient = FusionAuthClient;
exports.default = FusionAuthClient;
/**
 * Available JSON Web Algorithms (JWA) as described in RFC 7518 available for this JWT implementation.
 *
 * @author Daniel DeGroff
 */
var Algorithm;
(function (Algorithm) {
    Algorithm["ES256"] = "ES256";
    Algorithm["ES384"] = "ES384";
    Algorithm["ES512"] = "ES512";
    Algorithm["HS256"] = "HS256";
    Algorithm["HS384"] = "HS384";
    Algorithm["HS512"] = "HS512";
    Algorithm["RS256"] = "RS256";
    Algorithm["RS384"] = "RS384";
    Algorithm["RS512"] = "RS512";
    Algorithm["none"] = "none";
})(Algorithm = exports.Algorithm || (exports.Algorithm = {}));
var BreachAction;
(function (BreachAction) {
    BreachAction["Off"] = "Off";
    BreachAction["RecordOnly"] = "RecordOnly";
    BreachAction["NotifyUser"] = "NotifyUser";
    BreachAction["RequireChange"] = "RequireChange";
})(BreachAction = exports.BreachAction || (exports.BreachAction = {}));
/**
 * @author Daniel DeGroff
 */
var BreachedPasswordStatus;
(function (BreachedPasswordStatus) {
    BreachedPasswordStatus["None"] = "None";
    BreachedPasswordStatus["ExactMatch"] = "ExactMatch";
    BreachedPasswordStatus["SubAddressMatch"] = "SubAddressMatch";
    BreachedPasswordStatus["PasswordOnly"] = "PasswordOnly";
    BreachedPasswordStatus["CommonPassword"] = "CommonPassword";
})(BreachedPasswordStatus = exports.BreachedPasswordStatus || (exports.BreachedPasswordStatus = {}));
var BreachMatchMode;
(function (BreachMatchMode) {
    BreachMatchMode["Low"] = "Low";
    BreachMatchMode["Medium"] = "Medium";
    BreachMatchMode["High"] = "High";
})(BreachMatchMode = exports.BreachMatchMode || (exports.BreachMatchMode = {}));
/**
 * XML canonicalization method enumeration. This is used for the IdP and SP side of FusionAuth SAML.
 *
 * @author Brian Pontarelli
 */
var CanonicalizationMethod;
(function (CanonicalizationMethod) {
    CanonicalizationMethod["exclusive"] = "exclusive";
    CanonicalizationMethod["exclusive_with_comments"] = "exclusive_with_comments";
    CanonicalizationMethod["inclusive"] = "inclusive";
    CanonicalizationMethod["inclusive_with_comments"] = "inclusive_with_comments";
})(CanonicalizationMethod = exports.CanonicalizationMethod || (exports.CanonicalizationMethod = {}));
/**
 * @author Trevor Smith
 */
var ChangePasswordReason;
(function (ChangePasswordReason) {
    ChangePasswordReason["Administrative"] = "Administrative";
    ChangePasswordReason["Breached"] = "Breached";
    ChangePasswordReason["Expired"] = "Expired";
    ChangePasswordReason["Validation"] = "Validation";
})(ChangePasswordReason = exports.ChangePasswordReason || (exports.ChangePasswordReason = {}));
var ClientAuthenticationMethod;
(function (ClientAuthenticationMethod) {
    ClientAuthenticationMethod["none"] = "none";
    ClientAuthenticationMethod["client_secret_basic"] = "client_secret_basic";
    ClientAuthenticationMethod["client_secret_post"] = "client_secret_post";
})(ClientAuthenticationMethod = exports.ClientAuthenticationMethod || (exports.ClientAuthenticationMethod = {}));
/**
 * The types of connectors. This enum is stored as an ordinal on the <code>identities</code> table, order must be maintained.
 *
 * @author Trevor Smith
 */
var ConnectorType;
(function (ConnectorType) {
    ConnectorType["FusionAuth"] = "FusionAuth";
    ConnectorType["Generic"] = "Generic";
    ConnectorType["LDAP"] = "LDAP";
})(ConnectorType = exports.ConnectorType || (exports.ConnectorType = {}));
/**
 * Models a consent.
 *
 * @author Daniel DeGroff
 */
var ConsentStatus;
(function (ConsentStatus) {
    ConsentStatus["Active"] = "Active";
    ConsentStatus["Revoked"] = "Revoked";
})(ConsentStatus = exports.ConsentStatus || (exports.ConsentStatus = {}));
/**
 * Status for content like usernames, profile attributes, etc.
 *
 * @author Brian Pontarelli
 */
var ContentStatus;
(function (ContentStatus) {
    ContentStatus["ACTIVE"] = "ACTIVE";
    ContentStatus["PENDING"] = "PENDING";
    ContentStatus["REJECTED"] = "REJECTED";
})(ContentStatus = exports.ContentStatus || (exports.ContentStatus = {}));
var DeviceType;
(function (DeviceType) {
    DeviceType["BROWSER"] = "BROWSER";
    DeviceType["DESKTOP"] = "DESKTOP";
    DeviceType["LAPTOP"] = "LAPTOP";
    DeviceType["MOBILE"] = "MOBILE";
    DeviceType["OTHER"] = "OTHER";
    DeviceType["SERVER"] = "SERVER";
    DeviceType["TABLET"] = "TABLET";
    DeviceType["TV"] = "TV";
    DeviceType["UNKNOWN"] = "UNKNOWN";
})(DeviceType = exports.DeviceType || (exports.DeviceType = {}));
var EmailSecurityType;
(function (EmailSecurityType) {
    EmailSecurityType["NONE"] = "NONE";
    EmailSecurityType["SSL"] = "SSL";
    EmailSecurityType["TLS"] = "TLS";
})(EmailSecurityType = exports.EmailSecurityType || (exports.EmailSecurityType = {}));
/**
 * Event Log Type
 *
 * @author Daniel DeGroff
 */
var EventLogType;
(function (EventLogType) {
    EventLogType["Information"] = "Information";
    EventLogType["Debug"] = "Debug";
    EventLogType["Error"] = "Error";
})(EventLogType = exports.EventLogType || (exports.EventLogType = {}));
/**
 * Models the event types that FusionAuth produces.
 *
 * @author Brian Pontarelli
 */
var EventType;
(function (EventType) {
    EventType["UserDelete"] = "user.delete";
    EventType["UserCreate"] = "user.create";
    EventType["UserUpdate"] = "user.update";
    EventType["UserDeactivate"] = "user.deactivate";
    EventType["UserBulkCreate"] = "user.bulk.create";
    EventType["UserReactivate"] = "user.reactivate";
    EventType["UserAction"] = "user.action";
    EventType["JWTRefreshTokenRevoke"] = "jwt.refresh-token.revoke";
    EventType["JWTRefresh"] = "jwt.refresh";
    EventType["JWTPublicKeyUpdate"] = "jwt.public-key.update";
    EventType["UserLoginSuccess"] = "user.login.success";
    EventType["UserLoginFailed"] = "user.login.failed";
    EventType["UserRegistrationCreate"] = "user.registration.create";
    EventType["UserRegistrationUpdate"] = "user.registration.update";
    EventType["UserRegistrationDelete"] = "user.registration.delete";
    EventType["UserRegistrationVerified"] = "user.registration.verified";
    EventType["UserEmailVerified"] = "user.email.verified";
    EventType["UserPasswordBreach"] = "user.password.breach";
    EventType["Test"] = "test";
})(EventType = exports.EventType || (exports.EventType = {}));
/**
 * @author Brian Pontarelli
 */
var ExpiryUnit;
(function (ExpiryUnit) {
    ExpiryUnit["MINUTES"] = "MINUTES";
    ExpiryUnit["HOURS"] = "HOURS";
    ExpiryUnit["DAYS"] = "DAYS";
    ExpiryUnit["WEEKS"] = "WEEKS";
    ExpiryUnit["MONTHS"] = "MONTHS";
    ExpiryUnit["YEARS"] = "YEARS";
})(ExpiryUnit = exports.ExpiryUnit || (exports.ExpiryUnit = {}));
var FamilyRole;
(function (FamilyRole) {
    FamilyRole["Child"] = "Child";
    FamilyRole["Teen"] = "Teen";
    FamilyRole["Adult"] = "Adult";
})(FamilyRole = exports.FamilyRole || (exports.FamilyRole = {}));
/**
 * @author Daniel DeGroff
 */
var FormControl;
(function (FormControl) {
    FormControl["checkbox"] = "checkbox";
    FormControl["number"] = "number";
    FormControl["password"] = "password";
    FormControl["radio"] = "radio";
    FormControl["select"] = "select";
    FormControl["textarea"] = "textarea";
    FormControl["text"] = "text";
})(FormControl = exports.FormControl || (exports.FormControl = {}));
/**
 * @author Daniel DeGroff
 */
var FormDataType;
(function (FormDataType) {
    FormDataType["bool"] = "bool";
    FormDataType["consent"] = "consent";
    FormDataType["date"] = "date";
    FormDataType["email"] = "email";
    FormDataType["number"] = "number";
    FormDataType["string"] = "string";
})(FormDataType = exports.FormDataType || (exports.FormDataType = {}));
/**
 * @author Daniel DeGroff
 */
var FormFieldAdminPolicy;
(function (FormFieldAdminPolicy) {
    FormFieldAdminPolicy["Edit"] = "Edit";
    FormFieldAdminPolicy["View"] = "View";
})(FormFieldAdminPolicy = exports.FormFieldAdminPolicy || (exports.FormFieldAdminPolicy = {}));
/**
 * @author Daniel DeGroff
 */
var FormType;
(function (FormType) {
    FormType["registration"] = "registration";
    FormType["adminRegistration"] = "adminRegistration";
    FormType["adminUser"] = "adminUser";
})(FormType = exports.FormType || (exports.FormType = {}));
/**
 * Authorization Grant types as defined by the <a href="https://tools.ietf.org/html/rfc6749">The OAuth 2.0 Authorization
 * Framework - RFC 6749</a>.
 * <p>
 * Specific names as defined by <a href="https://tools.ietf.org/html/rfc7591#section-4.1">
 * OAuth 2.0 Dynamic Client Registration Protocol - RFC 7591 Section 4.1</a>
 *
 * @author Daniel DeGroff
 */
var GrantType;
(function (GrantType) {
    GrantType["authorization_code"] = "authorization_code";
    GrantType["implicit"] = "implicit";
    GrantType["password"] = "password";
    GrantType["client_credentials"] = "client_credentials";
    GrantType["refresh_token"] = "refresh_token";
    GrantType["unknown"] = "unknown";
    GrantType["device_code"] = "urn:ietf:params:oauth:grant-type:device_code";
})(GrantType = exports.GrantType || (exports.GrantType = {}));
/**
 * @author Daniel DeGroff
 */
var HTTPMethod;
(function (HTTPMethod) {
    HTTPMethod["GET"] = "GET";
    HTTPMethod["POST"] = "POST";
    HTTPMethod["PUT"] = "PUT";
    HTTPMethod["DELETE"] = "DELETE";
    HTTPMethod["HEAD"] = "HEAD";
    HTTPMethod["OPTIONS"] = "OPTIONS";
    HTTPMethod["PATCH"] = "PATCH";
})(HTTPMethod = exports.HTTPMethod || (exports.HTTPMethod = {}));
var IdentityProviderType;
(function (IdentityProviderType) {
    IdentityProviderType["ExternalJWT"] = "ExternalJWT";
    IdentityProviderType["OpenIDConnect"] = "OpenIDConnect";
    IdentityProviderType["Facebook"] = "Facebook";
    IdentityProviderType["Google"] = "Google";
    IdentityProviderType["Twitter"] = "Twitter";
    IdentityProviderType["SAMLv2"] = "SAMLv2";
    IdentityProviderType["HYPR"] = "HYPR";
    IdentityProviderType["Apple"] = "Apple";
})(IdentityProviderType = exports.IdentityProviderType || (exports.IdentityProviderType = {}));
var KeyAlgorithm;
(function (KeyAlgorithm) {
    KeyAlgorithm["ES256"] = "ES256";
    KeyAlgorithm["ES384"] = "ES384";
    KeyAlgorithm["ES512"] = "ES512";
    KeyAlgorithm["HS256"] = "HS256";
    KeyAlgorithm["HS384"] = "HS384";
    KeyAlgorithm["HS512"] = "HS512";
    KeyAlgorithm["RS256"] = "RS256";
    KeyAlgorithm["RS384"] = "RS384";
    KeyAlgorithm["RS512"] = "RS512";
})(KeyAlgorithm = exports.KeyAlgorithm || (exports.KeyAlgorithm = {}));
var KeyType;
(function (KeyType) {
    KeyType["EC"] = "EC";
    KeyType["RSA"] = "RSA";
    KeyType["HMAC"] = "HMAC";
})(KeyType = exports.KeyType || (exports.KeyType = {}));
/**
 * The use type of a key.
 *
 * @author Daniel DeGroff
 */
var KeyUse;
(function (KeyUse) {
    KeyUse["SignOnly"] = "SignOnly";
    KeyUse["SignAndVerify"] = "SignAndVerify";
    KeyUse["VerifyOnly"] = "VerifyOnly";
})(KeyUse = exports.KeyUse || (exports.KeyUse = {}));
/**
 * The types of lambdas that indicate how they are invoked by FusionAuth.
 *
 * @author Brian Pontarelli
 */
var LambdaType;
(function (LambdaType) {
    LambdaType["JWTPopulate"] = "JWTPopulate";
    LambdaType["OpenIDReconcile"] = "OpenIDReconcile";
    LambdaType["SAMLv2Reconcile"] = "SAMLv2Reconcile";
    LambdaType["SAMLv2Populate"] = "SAMLv2Populate";
    LambdaType["AppleReconcile"] = "AppleReconcile";
    LambdaType["ExternalJWTReconcile"] = "ExternalJWTReconcile";
    LambdaType["FacebookReconcile"] = "FacebookReconcile";
    LambdaType["GoogleReconcile"] = "GoogleReconcile";
    LambdaType["HYPRReconcile"] = "HYPRReconcile";
    LambdaType["TwitterReconcile"] = "TwitterReconcile";
    LambdaType["LDAPConnectorReconcile"] = "LDAPConnectorReconcile";
})(LambdaType = exports.LambdaType || (exports.LambdaType = {}));
var LDAPSecurityMethod;
(function (LDAPSecurityMethod) {
    LDAPSecurityMethod["None"] = "None";
    LDAPSecurityMethod["LDAPS"] = "LDAPS";
    LDAPSecurityMethod["StartTLS"] = "StartTLS";
})(LDAPSecurityMethod = exports.LDAPSecurityMethod || (exports.LDAPSecurityMethod = {}));
var LoginIdType;
(function (LoginIdType) {
    LoginIdType["email"] = "email";
    LoginIdType["username"] = "username";
})(LoginIdType = exports.LoginIdType || (exports.LoginIdType = {}));
/**
 * @author Matthew Altman
 */
var LogoutBehavior;
(function (LogoutBehavior) {
    LogoutBehavior["RedirectOnly"] = "RedirectOnly";
    LogoutBehavior["AllApplications"] = "AllApplications";
})(LogoutBehavior = exports.LogoutBehavior || (exports.LogoutBehavior = {}));
var OAuthErrorReason;
(function (OAuthErrorReason) {
    OAuthErrorReason["auth_code_not_found"] = "auth_code_not_found";
    OAuthErrorReason["access_token_malformed"] = "access_token_malformed";
    OAuthErrorReason["access_token_expired"] = "access_token_expired";
    OAuthErrorReason["access_token_unavailable_for_processing"] = "access_token_unavailable_for_processing";
    OAuthErrorReason["access_token_failed_processing"] = "access_token_failed_processing";
    OAuthErrorReason["refresh_token_not_found"] = "refresh_token_not_found";
    OAuthErrorReason["invalid_client_id"] = "invalid_client_id";
    OAuthErrorReason["invalid_user_credentials"] = "invalid_user_credentials";
    OAuthErrorReason["invalid_grant_type"] = "invalid_grant_type";
    OAuthErrorReason["invalid_origin"] = "invalid_origin";
    OAuthErrorReason["invalid_origin_opaque"] = "invalid_origin_opaque";
    OAuthErrorReason["invalid_pkce_code_verifier"] = "invalid_pkce_code_verifier";
    OAuthErrorReason["invalid_pkce_code_challenge"] = "invalid_pkce_code_challenge";
    OAuthErrorReason["invalid_pkce_code_challenge_method"] = "invalid_pkce_code_challenge_method";
    OAuthErrorReason["invalid_redirect_uri"] = "invalid_redirect_uri";
    OAuthErrorReason["invalid_response_mode"] = "invalid_response_mode";
    OAuthErrorReason["invalid_response_type"] = "invalid_response_type";
    OAuthErrorReason["invalid_id_token_hint"] = "invalid_id_token_hint";
    OAuthErrorReason["invalid_post_logout_redirect_uri"] = "invalid_post_logout_redirect_uri";
    OAuthErrorReason["invalid_device_code"] = "invalid_device_code";
    OAuthErrorReason["invalid_user_code"] = "invalid_user_code";
    OAuthErrorReason["invalid_additional_client_id"] = "invalid_additional_client_id";
    OAuthErrorReason["grant_type_disabled"] = "grant_type_disabled";
    OAuthErrorReason["missing_client_id"] = "missing_client_id";
    OAuthErrorReason["missing_code"] = "missing_code";
    OAuthErrorReason["missing_device_code"] = "missing_device_code";
    OAuthErrorReason["missing_grant_type"] = "missing_grant_type";
    OAuthErrorReason["missing_redirect_uri"] = "missing_redirect_uri";
    OAuthErrorReason["missing_refresh_token"] = "missing_refresh_token";
    OAuthErrorReason["missing_response_type"] = "missing_response_type";
    OAuthErrorReason["missing_token"] = "missing_token";
    OAuthErrorReason["missing_user_code"] = "missing_user_code";
    OAuthErrorReason["missing_verification_uri"] = "missing_verification_uri";
    OAuthErrorReason["login_prevented"] = "login_prevented";
    OAuthErrorReason["user_code_expired"] = "user_code_expired";
    OAuthErrorReason["user_expired"] = "user_expired";
    OAuthErrorReason["user_locked"] = "user_locked";
    OAuthErrorReason["user_not_found"] = "user_not_found";
    OAuthErrorReason["client_authentication_missing"] = "client_authentication_missing";
    OAuthErrorReason["invalid_client_authentication_scheme"] = "invalid_client_authentication_scheme";
    OAuthErrorReason["invalid_client_authentication"] = "invalid_client_authentication";
    OAuthErrorReason["client_id_mismatch"] = "client_id_mismatch";
    OAuthErrorReason["change_password_administrative"] = "change_password_administrative";
    OAuthErrorReason["change_password_breached"] = "change_password_breached";
    OAuthErrorReason["change_password_expired"] = "change_password_expired";
    OAuthErrorReason["change_password_validation"] = "change_password_validation";
    OAuthErrorReason["unknown"] = "unknown";
})(OAuthErrorReason = exports.OAuthErrorReason || (exports.OAuthErrorReason = {}));
var OAuthErrorType;
(function (OAuthErrorType) {
    OAuthErrorType["invalid_request"] = "invalid_request";
    OAuthErrorType["invalid_client"] = "invalid_client";
    OAuthErrorType["invalid_grant"] = "invalid_grant";
    OAuthErrorType["invalid_token"] = "invalid_token";
    OAuthErrorType["unauthorized_client"] = "unauthorized_client";
    OAuthErrorType["invalid_scope"] = "invalid_scope";
    OAuthErrorType["server_error"] = "server_error";
    OAuthErrorType["unsupported_grant_type"] = "unsupported_grant_type";
    OAuthErrorType["unsupported_response_type"] = "unsupported_response_type";
    OAuthErrorType["change_password_required"] = "change_password_required";
    OAuthErrorType["two_factor_required"] = "two_factor_required";
    OAuthErrorType["authorization_pending"] = "authorization_pending";
    OAuthErrorType["expired_token"] = "expired_token";
})(OAuthErrorType = exports.OAuthErrorType || (exports.OAuthErrorType = {}));
/**
 * @author Daniel DeGroff
 */
var ObjectState;
(function (ObjectState) {
    ObjectState["Active"] = "Active";
    ObjectState["Inactive"] = "Inactive";
    ObjectState["PendingDelete"] = "PendingDelete";
})(ObjectState = exports.ObjectState || (exports.ObjectState = {}));
/**
 * @author Daniel DeGroff
 */
var RefreshTokenExpirationPolicy;
(function (RefreshTokenExpirationPolicy) {
    RefreshTokenExpirationPolicy["Fixed"] = "Fixed";
    RefreshTokenExpirationPolicy["SlidingWindow"] = "SlidingWindow";
})(RefreshTokenExpirationPolicy = exports.RefreshTokenExpirationPolicy || (exports.RefreshTokenExpirationPolicy = {}));
/**
 * @author Daniel DeGroff
 */
var RefreshTokenUsagePolicy;
(function (RefreshTokenUsagePolicy) {
    RefreshTokenUsagePolicy["Reusable"] = "Reusable";
    RefreshTokenUsagePolicy["OneTimeUse"] = "OneTimeUse";
})(RefreshTokenUsagePolicy = exports.RefreshTokenUsagePolicy || (exports.RefreshTokenUsagePolicy = {}));
var RegistrationType;
(function (RegistrationType) {
    RegistrationType["basic"] = "basic";
    RegistrationType["advanced"] = "advanced";
})(RegistrationType = exports.RegistrationType || (exports.RegistrationType = {}));
/**
 * @author Daniel DeGroff
 */
var SecureGeneratorType;
(function (SecureGeneratorType) {
    SecureGeneratorType["randomDigits"] = "randomDigits";
    SecureGeneratorType["randomBytes"] = "randomBytes";
    SecureGeneratorType["randomAlpha"] = "randomAlpha";
    SecureGeneratorType["randomAlphaNumeric"] = "randomAlphaNumeric";
})(SecureGeneratorType = exports.SecureGeneratorType || (exports.SecureGeneratorType = {}));
/**
 * @author Daniel DeGroff
 */
var Sort;
(function (Sort) {
    Sort["asc"] = "asc";
    Sort["desc"] = "desc";
})(Sort = exports.Sort || (exports.Sort = {}));
/**
 * <ul>
 * <li>Bearer Token type as defined by <a href="https://tools.ietf.org/html/rfc6750">RFC 6750</a>.</li>
 * <li>MAC Token type as referenced by <a href="https://tools.ietf.org/html/rfc6749">RFC 6749</a> and
 * <a href="https://tools.ietf.org/html/draft-ietf-oauth-v2-http-mac-05">
 * Draft RFC on OAuth 2.0 Message Authentication Code (MAC) Tokens</a>
 * </li>
 * </ul>
 *
 * @author Daniel DeGroff
 */
var TokenType;
(function (TokenType) {
    TokenType["Bearer"] = "Bearer";
    TokenType["MAC"] = "MAC";
})(TokenType = exports.TokenType || (exports.TokenType = {}));
/**
 * The transaction types for Webhooks and other event systems within FusionAuth.
 *
 * @author Brian Pontarelli
 */
var TransactionType;
(function (TransactionType) {
    TransactionType["None"] = "None";
    TransactionType["Any"] = "Any";
    TransactionType["SimpleMajority"] = "SimpleMajority";
    TransactionType["SuperMajority"] = "SuperMajority";
    TransactionType["AbsoluteMajority"] = "AbsoluteMajority";
})(TransactionType = exports.TransactionType || (exports.TransactionType = {}));
/**
 * @author Daniel DeGroff
 */
var TwoFactorDelivery;
(function (TwoFactorDelivery) {
    TwoFactorDelivery["None"] = "None";
    TwoFactorDelivery["TextMessage"] = "TextMessage";
})(TwoFactorDelivery = exports.TwoFactorDelivery || (exports.TwoFactorDelivery = {}));
/**
 * The phases of a time-based user action.
 *
 * @author Brian Pontarelli
 */
var UserActionPhase;
(function (UserActionPhase) {
    UserActionPhase["start"] = "start";
    UserActionPhase["modify"] = "modify";
    UserActionPhase["cancel"] = "cancel";
    UserActionPhase["end"] = "end";
})(UserActionPhase = exports.UserActionPhase || (exports.UserActionPhase = {}));
/**
 * @author Daniel DeGroff
 */
var UserState;
(function (UserState) {
    UserState["Authenticated"] = "Authenticated";
    UserState["AuthenticatedNotRegistered"] = "AuthenticatedNotRegistered";
})(UserState = exports.UserState || (exports.UserState = {}));
var XMLSignatureLocation;
(function (XMLSignatureLocation) {
    XMLSignatureLocation["Assertion"] = "Assertion";
    XMLSignatureLocation["Response"] = "Response";
})(XMLSignatureLocation = exports.XMLSignatureLocation || (exports.XMLSignatureLocation = {}));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./DefaultRESTClientBuilder":5}]},{},[1])(1)
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
